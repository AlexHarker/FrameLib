{
    "fl.spatial~": {
        "0": {
            "name": "0. /inputmode [enum]",
            "description": "Sets the input coordinate mode.\n\nParameter Options:\n[0] - polar\n[1] - cartesian"
        },
        "1": {
            "name": "1. /speakers [variable length double array]",
            "description": "Sets the speaker positions in polar triples (one triple per speaker)."
        },
        "2": {
            "name": "2. /weights [variable length double array]",
            "description": "Sets the speaker weightings (one value per speaker)."
        },
        "3": {
            "name": "3. /rolloff [double]",
            "description": "Sets the rolloff in dB."
        },
        "4": {
            "name": "4. /blur [double]",
            "description": "Sets the blur factor."
        },
        "5": {
            "name": "5. /maxspeakers [int]",
            "description": "Sets the maximum number of speakers to be used (the neaarest N speakers will be used only). If zero all speakers are used."
        },
        "6": {
            "name": "6. /points [double]",
            "description": "Interpolate to point source panning (0 is modified DBAP - 1 is point source)."
        }
    },
    "fl.coordinatesystem~": {
        "0": {
            "name": "0. /mode [instantiation enum]",
            "description": "Sets the conversion mode.\n\nParameter Options:\n[0] - polar->cartesian\n[1] - cartesian->polar"
        }
    },
    "fl.unpack~": {
        "0": {
            "name": "0. /outputs [instantiation int]",
            "description": "Sets the number of outputs."
        }
    },
    "fl.streamid~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.pack~": {
        "0": {
            "name": "0. /inputs [instantiation int]",
            "description": "Sets the number of inputs."
        }
    },
    "fl.dispatch~": {
        "0": {
            "name": "0. /num_ins [instantiation double]",
            "description": "Sets the number of inputs."
        },
        "1": {
            "name": "1. /num_outs [instantiation double]",
            "description": "Sets the number of outputs."
        },
        "2": {
            "name": "2. /input_ 1 [int]",
            "description": ""
        },
        "3": {
            "name": "3. /input_ 2 [int]",
            "description": ""
        }
    },
    "fl.route~": {
        "0": {
            "name": "0. /num_outs [instantiation double]",
            "description": "Sets the number of outputs."
        },
        "1": {
            "name": "1. /output [int]",
            "description": "Sets the current output counting from 1 (off if out of range)."
        }
    },
    "fl.select~": {
        "0": {
            "name": "0. /num_ins [instantiation double]",
            "description": "Sets the number of inputs."
        },
        "1": {
            "name": "1. /input [int]",
            "description": "Sets the current input counting from 1 (or off if out of range)."
        }
    },
    "fl.timedelta~": {
        "0": {
            "name": "0. /units [instantiation enum]",
            "description": "Sets the time units used to for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.timer~": {
        "0": {
            "name": "0. /units [instantiation enum]",
            "description": "Sets the time units used to for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.now~": {
        "0": {
            "name": "0. /units [instantiation enum]",
            "description": "Sets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.ticks~": {
        "0": {
            "name": "0. /limit [int]",
            "description": "Sets the counter threshold."
        },
        "1": {
            "name": "1. /value [int]",
            "description": "Sets a new starting value at next trigger"
        },
        "2": {
            "name": "2. /limit_mode [enum]",
            "description": "Sets the mode for changes in threshold.\n\nParameter Options:\n[0] - progress\n[1] - restart"
        },
        "3": {
            "name": "3. /run_mode [enum]",
            "description": "Sets the run mode.\n\nParameter Options:\n[0] - run\n[1] - pause\n[2] - stop"
        }
    },
    "fl.argmin~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.sort~": {
        "0": {
            "name": "0. /order [enum]",
            "description": "Sets the ordering of the sorted output.\n\nParameter Options:\n[0] - up\n[1] - down"
        },
        "1": {
            "name": "1. /indices_mode [bool]",
            "description": "No parameter info available"
        }
    },
    "fl.shift~": {
        "0": {
            "name": "0. /shift [double]",
            "description": "Sets the shift amount (-ve for left shift / +ve for right shift)."
        },
        "1": {
            "name": "1. /pad [double]",
            "description": "Sets the padding value."
        },
        "2": {
            "name": "2. /mode [enum]",
            "description": "Sets the shift mode. pad - values are replaced with the padding value. wrap - values are wrapped cyclically.\n\nParameter Options:\n[0] - pad\n[1] - wrap"
        },
        "3": {
            "name": "3. /units [enum]",
            "description": "Sets units for the shift (samples or ratio of the input length [-1 to 1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.standarddeviation~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.geometricmean~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.accumpoint~": {
        "0": {
            "name": "0. /percentage [double]",
            "description": "Sets the percentile of the accumlation for the calculation [0-100]."
        }
    },
    "fl.centroid~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.medianfilter~": {
        "0": {
            "name": "0. /width [int]",
            "description": "Sets the width of the median filtering in samples."
        },
        "1": {
            "name": "1. /pad [double]",
            "description": "Sets the padding value."
        },
        "2": {
            "name": "2. /mode [enum]",
            "description": "Sets the mode that controls the edge behaviour: pad - the edges are treated as though infinitely padded with the padding value. wrap - the edges are treated as though the frame is wrapped cyclically. fold - the edges are treated as though they fold over (suitable for spectral purposes).\n\nParameter Options:\n[0] - pad\n[1] - wrap\n[2] - fold"
        }
    },
    "fl.percentile~": {
        "0": {
            "name": "0. /percentile [double]",
            "description": "Sets the percentile to calculate [0-100]."
        }
    },
    "fl.kurtosis~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.nonzero~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.vmin~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.flatness~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.skewness~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.join~": {
        "0": {
            "name": "0. /num_ins [instantiation int]",
            "description": "Sets the number of inputs."
        },
        "1": {
            "name": "1. /trigger_ins [instantiation fixed length bool array]",
            "description": "Set which inputs trigger output (by default all inputs)."
        }
    },
    "fl.length~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.argmax~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.mean~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.rms~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.pad~": {
        "0": {
            "name": "0. /pad [double]",
            "description": "Sets the padding value."
        },
        "1": {
            "name": "1. /start [double]",
            "description": "Sets the amount of padding to apply at the start of the frame."
        },
        "2": {
            "name": "2. /end [double]",
            "description": "Sets the amount of padding to apply at the end of the frame."
        },
        "3": {
            "name": "3. /units [enum]",
            "description": "Sets units for padding amounts (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.reverse~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.pattern~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Set the playback mode. once - the pattern is played once only. loop - the pattern loops infinitely.\n\nParameter Options:\n[0] - once\n[1] - loop"
        }
    },
    "fl.sum~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.nanfilter~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Set whether to replace or remove NaN values\n\nParameter Options:\n[0] - replace\n[1] - remove"
        },
        "1": {
            "name": "1. /value [double]",
            "description": "Set the value with which to replace NaN values"
        }
    },
    "fl.vmax~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.split~": {
        "0": {
            "name": "0. /split [double]",
            "description": "Sets the split point."
        },
        "1": {
            "name": "1. /units [enum]",
            "description": "Sets units for the split point (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.subframe~": {
        "0": {
            "name": "0. /start [double]",
            "description": "Sets the start point of the subframe."
        },
        "1": {
            "name": "1. /end [double]",
            "description": "Sets the end point of the subframe."
        },
        "2": {
            "name": "2. /units [enum]",
            "description": "Sets units for the start and end points (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.product~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.crest~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.chop~": {
        "0": {
            "name": "0. /num_outs [instantiation int]",
            "description": "Sets the number of outputs."
        },
        "1": {
            "name": "1. /size [double]",
            "description": "Sets the size of the output frames."
        },
        "2": {
            "name": "2. /units [enum]",
            "description": "Sets units for the chop size (samples or ratio of the input length [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.peaks~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.spread~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexminus~": {
        "0": {
            "name": "0. /mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complexdivide~": {
        "0": {
            "name": "0. /mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complexmultiply~": {
        "0": {
            "name": "0. /mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complexpow~": {
        "0": {
            "name": "0. /mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complexplus~": {
        "0": {
            "name": "0. /mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.read~": {
        "0": {
            "name": "0. /buffer [string]",
            "description": "Sets the buffer~ name to use."
        },
        "1": {
            "name": "1. /chan [int]",
            "description": "Sets the buffer~ channel to use."
        },
        "2": {
            "name": "2. /interp [enum]",
            "description": "Sets the interpolation mode: hermite - cubic hermite interpolation. bspline - cubic bspline interpolation. lagrange - cubic lagrange interpolation. linear - linear interpolation.\n\nParameter Options:\n[0] - hermite\n[1] - bspline\n[2] - lagrange\n[3] - linear\n[4] - none"
        },
        "3": {
            "name": "3. /units [enum]",
            "description": "Sets the units for the position input.\n\nParameter Options:\n[0] - ms\n[1] - seconds\n[2] - samples"
        }
    },
    "fl.info~": {
        "0": {
            "name": "0. /buffer [string]",
            "description": "Sets the buffer name to use."
        },
        "1": {
            "name": "1. /units [enum]",
            "description": "Sets the units of output for the size of the buffer.\n\nParameter Options:\n[0] - ms\n[1] - seconds\n[2] - samples"
        }
    },
    "fl.exp2~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.asinh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.log~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.erf~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.exp~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.sin~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.log2~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.asin~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.acos~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.cos~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.sinh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.floor~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.trunc~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.log10~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.atanh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.sqrt~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.acosh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.tan~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.not~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.atan~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.tanh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.erfc~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.abs~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.round~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.cbrt~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.cosh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.ceil~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.copysign~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.greaterthaneq~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.greaterthan~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.or~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.and~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.times~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.divide~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.minus~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.pow~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.atan2~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.notequals~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.lessthaneq~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.max~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.plus~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.modulo~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.lessthan~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.diff~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.equals~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.hypot~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.min~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap - the smaller input is read modulo against the larger input. shrink - the output length is set to the size of the smaller input. pad_in - the smaller input is padded prior to calculation to match the size of the larger input. pad_out - the output is padded to match the size of the larger input.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "1": {
            "name": "1. /trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "2": {
            "name": "2. /pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.uniform~": {
        "0": {
            "name": "0. /value [double]",
            "description": "Sets the value to repeat for each output frame."
        },
        "1": {
            "name": "1. /mode [enum]",
            "description": "Controls how the output length is determined: requested - the output frame size is set by the length parameter. input - the output frame size will match the input size.\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "2": {
            "name": "2. /length [int]",
            "description": "Sets the length of the output when the mode is set to requested. Set in the units specified by the units parameter."
        },
        "3": {
            "name": "3. /units [enum]",
            "description": "Sets the units for specified output lengths.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.random~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Controls how the output length is determined: requested - the output frame size is set by the length parameter. input - the output frame size will match the input size.\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "1": {
            "name": "1. /length [int]",
            "description": "Sets the length of the output when the mode is set to requested. Set in the units specified by the units parameter."
        },
        "2": {
            "name": "2. /units [enum]",
            "description": "Sets the units for specified output lengths.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.gaussian~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Controls how the output length is determined: requested - the output frame size is set by the length parameter. input - the output frame size will match the input size.\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "1": {
            "name": "1. /length [int]",
            "description": "Sets the length of the output when the mode is set to requested. Set in the units specified by the units parameter."
        },
        "2": {
            "name": "2. /units [enum]",
            "description": "Sets the units for specified output lengths.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.ramp~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Controls how the output length is determined: requested - the output frame size is set by the length parameter. input - the output frame size will match the input size.\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "1": {
            "name": "1. /length [int]",
            "description": "Sets the length of the output when the mode is set to requested. Set in the units specified by the units parameter."
        },
        "2": {
            "name": "2. /units [enum]",
            "description": "Sets the units for specified output lengths.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "3": {
            "name": "3. /scale [enum]",
            "description": "Sets the scaling of the output ramp.\n\nParameter Options:\n[0] - count\n[1] - ms\n[2] - seconds\n[3] - normalised"
        }
    },
    "fl.tomax~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.frommax~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Sets the object mode. values - translate values from max into vectors. params - translate messages into concatenated tagged frames to set parameters\n\nParameter Options:\n[0] - values\n[1] - params"
        }
    },
    "fl.sink~": {
        "0": {
            "name": "0. /buffer_size [instantiation double]",
            "description": "Sets the internal buffer size in the units specified by the units parameter."
        },
        "1": {
            "name": "1. /units [instantiation enum]",
            "description": "Sets the time units used to determine the buffer size and delay.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "2": {
            "name": "2. /delay [double]",
            "description": "Sets the delay before output in the units specified by the units parameter."
        }
    },
    "fl.trace~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Sets the mode used for output: full - outputs the entire frame in full. first - output the first sample of the frame only. last - output the last sample of the frame only. specified - output the sample specified directly by the position parameter (clipped into the frame size). ratio - output the sample specified by the position parameter as a ratio to the frame length (clipped into the frame size).\n\nParameter Options:\n[0] - full\n[1] - first\n[2] - last\n[3] - specified\n[4] - ratio"
        },
        "1": {
            "name": "1. /buffer_size [instantiation double]",
            "description": "Sets the internal buffer size in the units specified by the units parameter."
        },
        "2": {
            "name": "2. /units [instantiation enum]",
            "description": "Sets the time units used to determine the buffer size and delay.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "3": {
            "name": "3. /position [double]",
            "description": "Sets the position of the output sample in specified mode (in samples) or ratio mode (as a ratio of the position in the frame)."
        },
        "4": {
            "name": "4. /delay [double]",
            "description": "Sets the delay before output in the units specified by the units parameter."
        }
    },
    "fl.source~": {
        "0": {
            "name": "0. /buffer_size [instantiation double]",
            "description": "Sets the internal buffer size in the units specified by the units parameter."
        },
        "1": {
            "name": "1. /length [int]",
            "description": "Sets the length of output frames in the units specified by the units parameter."
        },
        "2": {
            "name": "2. /units [enum]",
            "description": "Sets the time units used to determine the buffer size and output length.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "3": {
            "name": "3. /delay [double]",
            "description": "Sets the input delay in the units specified by the units parameter: N.B. - there is a minimum delay or latency of the output length."
        }
    },
    "fl.convolve~": {
        "0": {
            "name": "0. /maxlength [instantiation int]",
            "description": "Sets the maximum output length. The output length will be M + N - 1 where M and N are the sizes of the two inputs respectively"
        },
        "1": {
            "name": "1. /mode [instantiation enum]",
            "description": "Sets the type of input expected / output produced.\n\nParameter Options:\n[0] - real\n[1] - complex"
        },
        "2": {
            "name": "2. /edges [instantiation enum]",
            "description": "No parameter info available\n\nParameter Options:\n[0] - linear\n[1] - circular\n[2] - wrap\n[3] - fold"
        }
    },
    "fl.multitaper~": {
        "0": {
            "name": "0. /maxlength [instantiation int]",
            "description": "Sets the maximum input length / FFT size."
        },
        "1": {
            "name": "1. /numtapers [int]",
            "description": "Sets the number of tapers to use."
        }
    },
    "fl.correlate~": {
        "0": {
            "name": "0. /maxlength [instantiation int]",
            "description": "Sets the maximum output length. The output length will be M + N - 1 where M and N are the sizes of the two inputs respectively"
        },
        "1": {
            "name": "1. /mode [instantiation enum]",
            "description": "Sets the type of input expected / output produced.\n\nParameter Options:\n[0] - real\n[1] - complex"
        },
        "2": {
            "name": "2. /edges [instantiation enum]",
            "description": "No parameter info available\n\nParameter Options:\n[0] - linear\n[1] - circular\n[2] - wrap\n[3] - fold"
        }
    },
    "fl.fft~": {
        "0": {
            "name": "0. /maxlength [instantiation int]",
            "description": "Sets the maximum input length / FFT size."
        },
        "1": {
            "name": "1. /normalise [instantiation bool]",
            "description": "When on the output is normalised so that sine waves produce the same level output regardless of the FFT size."
        },
        "2": {
            "name": "2. /mode [instantiation enum]",
            "description": "Sets the type of input expected / output produced.\n\nParameter Options:\n[0] - real\n[1] - complex\n[2] - fullspectrum"
        }
    },
    "fl.ifft~": {
        "0": {
            "name": "0. /maxlength [instantiation int]",
            "description": "Sets the maximum output length / FFT size."
        },
        "1": {
            "name": "1. /normalise [instantiation bool]",
            "description": "When on the input is expected to be normalised."
        },
        "2": {
            "name": "2. /mode [instantiation enum]",
            "description": "Sets the type of input expected / output produced.\n\nParameter Options:\n[0] - real\n[1] - complex\n[2] - fullspectrum"
        }
    },
    "fl.window~": {
        "0": {
            "name": "0. /window [enum]",
            "description": "Sets the window type.\n\nParameter Options:\n[0] - hann\n[1] - hamming\n[2] - triangle\n[3] - cosine\n[4] - blackman\n[5] - blackman62\n[6] - blackman70\n[7] - blackman74\n[8] - blackman92\n[9] - blackmanharris\n[10] - flattop\n[11] - rectangle"
        },
        "1": {
            "name": "1. /size [double]",
            "description": "Sets the size of the internal window. If set to 0 the window will be recalculated to match the input size (good for frequency domain applications. Otherwise an internally stored window is linearly interpolated to fit the input size (good for granular applications."
        },
        "2": {
            "name": "2. /sqrt [bool]",
            "description": "Sets whether the window should be used directly, or the square root of the window."
        },
        "3": {
            "name": "3. /compensate [enum]",
            "description": "Sets the gain compensation used. off - no compensation is used. linear - compensate the linear gain of the window. power - compensate the power gain of the window. powoverlin - compensate by the power gain divided by the linear gain\n\nParameter Options:\n[0] - off\n[1] - linear\n[2] - power\n[3] - powoverlin"
        },
        "4": {
            "name": "4. /endpoints [enum]",
            "description": "Sets which endpoints of the window used will be non-zero for windows that start and end at zero.\n\nParameter Options:\n[0] - first\n[1] - last\n[2] - both\n[3] - none"
        }
    },
    "fl.store~": {
        "0": {
            "name": "0. /name [instantiation string]",
            "description": "Sets the name of the memory location to use."
        }
    },
    "fl.register~": {
        "0": {
            "name": "0. /mode [instantiation enum]",
            "description": "Sets the behaviour of the right input: store - stores without output. pass - stores and outputs.\n\nParameter Options:\n[0] - store\n[1] - pass"
        }
    },
    "fl.recall~": {
        "0": {
            "name": "0. /name [instantiation string]",
            "description": "Sets the name of the memory location to use."
        }
    },
    "fl.ewmsd~": {
        "0": {
            "name": "0. /alpha_up [double]",
            "description": "Sets the alpha value for weighting when the input is increasing."
        },
        "1": {
            "name": "1. /alpha_down [double]",
            "description": "Sets the alpha value for weighting when the input is decreasing."
        }
    },
    "fl.timemedian~": {
        "0": {
            "name": "0. /max_frames [int]",
            "description": "Sets the maximum number of frames that can be set as a time period - changing resets the buffer."
        },
        "1": {
            "name": "1. /num_frames [int]",
            "description": "Sets the current integer number of frames for calculation."
        }
    },
    "fl.framedelta~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.lag~": {
        "0": {
            "name": "0. /max_frames [int]",
            "description": "Sets the maximum number of frames that can be set as a lag time."
        },
        "1": {
            "name": "1. /num_frames [int]",
            "description": "Sets the current lag as an integer number of frames."
        }
    },
    "fl.ewma~": {
        "0": {
            "name": "0. /alpha_up [double]",
            "description": "Sets the alpha value for weighting when the input is increasing."
        },
        "1": {
            "name": "1. /alpha_down [double]",
            "description": "Sets the alpha value for weighting when the input is decreasing."
        }
    },
    "fl.timemean~": {
        "0": {
            "name": "0. /max_frames [int]",
            "description": "Sets the maximum number of frames that can be set as a time period - changing resets the buffer."
        },
        "1": {
            "name": "1. /num_frames [int]",
            "description": "Sets the current integer number of frames for calculation."
        }
    },
    "fl.timestddev~": {
        "0": {
            "name": "0. /max_frames [int]",
            "description": "Sets the maximum number of frames that can be set as a time period - changing resets the buffer."
        },
        "1": {
            "name": "1. /num_frames [int]",
            "description": "Sets the current integer number of frames for calculation."
        }
    },
    "fl.perblock~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.once~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.audiotrigger~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.future~": {
        "0": {
            "name": "0. /time [double]",
            "description": "Sets the time of the next frame."
        },
        "1": {
            "name": "1. /units [enum]",
            "description": "Sets the time units.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "2": {
            "name": "2. /mode [enum]",
            "description": "Sets the mode for timings (relative or absolute)\n\nParameter Options:\n[0] - absolute\n[1] - relative"
        }
    },
    "fl.interval~": {
        "0": {
            "name": "0. /interval [double]",
            "description": "Sets the interval between frames in the units of the units parameter."
        },
        "1": {
            "name": "1. /units [enum]",
            "description": "Sets the time units used to set the interval between frames.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n[3] - hz"
        }
    },
    "fl.chain~": {
        "0": {
            "name": "0. /units [enum]",
            "description": "Sets the time units used.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "1": {
            "name": "1. /mode [enum]",
            "description": "Sets the mode for timings (absolute or relative)\n\nParameter Options:\n[0] - absolute\n[1] - relative"
        }
    },
    "fl.complexsinh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complextan~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.poltocar~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexcos~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexsin~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexcosh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexlog10~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complextanh~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexconj~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexexp~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexlog~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.complexsqrt~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.cartopol~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.wrap~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap -   smaller right inputs are read modulo against larger left input. shrink - the output length is set to the size of the smaller input. extend - smaller right inputs are extended by repeating their final value\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        }
    },
    "fl.fold~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap -   smaller right inputs are read modulo against larger left input. shrink - the output length is set to the size of the smaller input. extend - smaller right inputs are extended by repeating their final value\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        }
    },
    "fl.clip~": {
        "0": {
            "name": "0. /mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths: wrap -   smaller right inputs are read modulo against larger left input. shrink - the output length is set to the size of the smaller input. extend - smaller right inputs are extended by repeating their final value\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        }
    },
    "fl.lookup~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "No parameter info available\n\nParameter Options:\n[0] - zero\n[1] - clip"
        },
        "1": {
            "name": "1. /interp [enum]",
            "description": "No parameter info available\n\nParameter Options:\n[0] - hermite\n[1] - bspline\n[2] - lagrange\n[3] - linear\n[4] - none"
        },
        "2": {
            "name": "2. /scale [enum]",
            "description": "No parameter info available\n\nParameter Options:\n[0] - samples\n[1] - normalised\n[2] - bipolar"
        }
    },
    "fl.convert~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Sets the mode of conversion: db->amp - converts from decibels into linear amplitudes. amp->db - converts from linear amplitudes int decibels. midi->freq - converts from midi notes into frequencies. freq->mid - converts from frequencies into midi notes. semitone->ratio - converts semitone transpositons into ratios. ratio->semitone - converts from transpositon ratios in semitones. deg->rad - converts from degress to radians. rad->deg - converts from radians to degrees.\n\nParameter Options:\n[0] - db->amp\n[1] - amp->db\n[2] - midi->freq\n[3] - freq->midi\n[4] - semitone->ratio\n[5] - ratio->semitone\n[6] - deg->rad\n[7] - rad->deg"
        }
    },
    "fl.constant~": {
        "0": {
            "name": "0. /constant [enum]",
            "description": "Sets the constant to output.\n\nParameter Options:\n[0] - pi\n[1] - e\n[2] - sqrt2\n[3] - 1/pi\n[4] - 1/e\n[5] - 1/sqrt2\n[6] - epsilon"
        },
        "1": {
            "name": "1. /multiplier [double]",
            "description": "Sets the multiplier."
        }
    },
    "fl.map~": {
        "0": {
            "name": "0. /mode [enum]",
            "description": "Sets the type of output scaling: linear / log / exp - scaling as specified. pow - scale the input range to [0-1], apply the specifiedexponent and then scale to the output range. db / invdb - output / input respectively are set in dB but scaled as gain values. transpose / invtranspose - output / input respectively are set in semitones but scaled as ratios for transposition.\n\nParameter Options:\n[0] - linear\n[1] - log\n[2] - exp\n[3] - pow\n[4] - db\n[5] - invdb\n[6] - transpose\n[7] - invtranspose"
        },
        "1": {
            "name": "1. /inlo [double]",
            "description": "Sets the low input value."
        },
        "2": {
            "name": "2. /inhi [double]",
            "description": "Sets the high input value."
        },
        "3": {
            "name": "3. /outlo [double]",
            "description": "Sets the low output value."
        },
        "4": {
            "name": "4. /outhi [double]",
            "description": "Sets the high output value."
        },
        "5": {
            "name": "5. /exponent [double]",
            "description": "Sets the exponent for the pow mode."
        },
        "6": {
            "name": "6. /clip [bool]",
            "description": "If true then the output is clipped between the low and high output value."
        }
    },
    "fl.samplerate~": {
        "0": {
            "name": "0. /mode [instantiation enum]",
            "description": "Sets the type of conversion / value to output: value - output the sample rate. nyquist - output the nyquist frequency. samples->ms - convert from samples to milliseconds. samples->seconds - convert from samples to seconds. ms->samples - convert from milliseconds to samples. seconds->samples - convert from seconds to samples. norm->freq - convert from normalised frequency [0 - 1 is 0 - sample rate] to frequency in Hz. halfnorm->freq - convert from half normalised frequency [0 - 1 is 0 - nyquist] to frequency in Hz.  freq->norm  - convert from frequency in Hz to normalised frequency [0 - 1 is 0 - sample rate]. freq->halfnorm - convert from frequency in Hz to hald normalised frequency [0 - 1 is 0 - nyquist].\n\nParameter Options:\n[0] - value\n[1] - nyquist\n[2] - samples->ms\n[3] - samples->seconds\n[4] - ms->samples\n[5] - seconds->samples\n[6] - norm->freq\n[7] - halfnorm->freq\n[8] - freq->norm\n[9] - freq->halfnorm"
        }
    },
    "fl.onepolezero~": {
        "0": {
            "name": "0. /freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "1": {
            "name": "1. /mode [enum]",
            "description": "Sets the filter mode.\n\nParameter Options:\n[0] - lpf\n[1] - hpf"
        }
    },
    "fl.0dfsvf~": {
        "0": {
            "name": "0. /freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "1": {
            "name": "1. /reson [double]",
            "description": "Sets the filter resonance [0-1]."
        },
        "2": {
            "name": "2. /mode [enum]",
            "description": "Sets the filter mode.\n\nParameter Options:\n[0] - lpf\n[1] - bpf\n[2] - hpf"
        }
    },
    "fl.resonant~": {
        "0": {
            "name": "0. /freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "1": {
            "name": "1. /reson [double]",
            "description": "Sets the filter resonance [0-1]."
        },
        "2": {
            "name": "2. /mode [enum]",
            "description": "Sets the filter mode.\n\nParameter Options:\n[0] - lpf\n[1] - hpf"
        }
    },
    "fl.sallenkey~": {
        "0": {
            "name": "0. /freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "1": {
            "name": "1. /reson [double]",
            "description": "Sets the filter resonance [0-1]."
        },
        "2": {
            "name": "2. /mode [enum]",
            "description": "Sets the filter mode.\n\nParameter Options:\n[0] - lpf\n[1] - bpf\n[2] - hpf"
        }
    },
    "fl.onepole~": {
        "0": {
            "name": "0. /freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "1": {
            "name": "1. /mode [enum]",
            "description": "Sets the filter mode.\n\nParameter Options:\n[0] - lpf\n[1] - hpf"
        }
    },
    "fl.complexexpr~": {
        "0": {
            "name": "0. /expr [instantiation string]",
            "description": "Sets the mathematical expression."
        },
        "1": {
            "name": "1. /mismatch [instantiation enum]",
            "description": "Sets the number of inputs.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        },
        "2": {
            "name": "2. /trigger_ins [instantiation variable length bool array]",
            "description": "No parameter info available"
        }
    },
    "fl.expr~": {
        "0": {
            "name": "0. /expr [instantiation string]",
            "description": "Sets the mathematical expression."
        },
        "1": {
            "name": "1. /mismatch [instantiation enum]",
            "description": "Sets the number of inputs.\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        },
        "2": {
            "name": "2. /trigger_ins [instantiation variable length bool array]",
            "description": "No parameter info available"
        }
    },
    "fl.filtertags~": {
        "0": {
            "name": "0. /num_filters [instantiation int]",
            "description": "Sets the number of parameter names."
        },
        "1": {
            "name": "1. /tag_01 [instantiation string]",
            "description": "No parameter info available"
        }
    },
    "fl.getparam~": {
        "0": {
            "name": null,
            "description": "This object has no parameters."
        }
    },
    "fl.tag~": {
        "0": {
            "name": "0. /num_ins [instantiation int]",
            "description": "Sets the number of inputs (and hence the number of tags)."
        },
        "1": {
            "name": "1. /empty_mode [instantiation enum]",
            "description": "Sets the behaviour when empty frames are received: ignore - empty frames are ignored / reset - empty frames create empty tags to reset parameters.\n\nParameter Options:\n[0] - ignore\n[1] - reset"
        },
        "2": {
            "name": "2. /tag_01 [instantiation string]",
            "description": "Sets the tag for input 1."
        }
    },
    "fl.untag~": {
        "0": {
            "name": "0. /num_outs [instantiation int]",
            "description": "Sets the number of outputs (and hence the number of tags."
        },
        "1": {
            "name": "1. /tag_01 [instantiation string]",
            "description": "Sets the tag related to output 1."
        }
    },
    "fl.combinetags~": {
        "0": {
            "name": "0. /num_ins [instantiation int]",
            "description": "Sets the number of inputs."
        }
    }
}