<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<?xml-stylesheet href='./_c74_ref.xsl' type='text/xsl'?>
<c74object name="fl.ticks~" module="FrameLib" category="FrameLib Timing">
  <digest>
    Counts incoming frames
  </digest>
  <description>
    Counting is between zero and one less than the limit parameter. Counting can be either up or down. Couting can be run (once), looped, paused or stopped. Triggers at the reset input set the count to the value of the reset parameter.
  </description>
  <misc name="Parameters">
    <entry name="/limit [int]">
      <description>
        Sets the count limit.
      </description>
    </entry>
    <entry name="/direction [enum]">
      <description>
        Sets the direction of counting.<br /><bullet>[0] - <m>up</m></bullet><bullet>[1] - <m>down</m></bullet>
      </description>
    </entry>
    <entry name="/reset [int]">
      <description>
        Sets the reset value. A value of -1 can be used for direction independent reset. This results in reset to 0 when counting up and (limit - 1) when counting down.
      </description>
    </entry>
    <entry name="/mode [enum]">
      <description>
        Sets the mode:<br /><bullet>[0] - <m>run</m> - the count continues until it hits the limit or zero.</bullet><bullet>[1] - <m>loop</m> - the count loops between zero and the limit minus one.</bullet><bullet>[2] - <m>pause</m> - the count is paused until the mode is changed.</bullet><bullet>[3] - <m>stop</m> - the count returns to the reset value until the mode is changed.</bullet>
      </description>
    </entry>
    <entry name="/idle [enum]">
      <description>
        Sets the idle output (the output when stopped, paused or out of bounds):<br /><bullet>[0] - <m>repeat</m> - repeat the current count.</bullet><bullet>[1] - <m>empty</m> - output an empty frame.</bullet>
      </description>
    </entry>
  </misc>
  <metadatalist>
    <metadata name="author">Alex Harker</metadata>
    <metadata name="tag">FrameLib</metadata>
    <metadata name="tag">FrameLib Timing</metadata>
  </metadatalist>
  <objarglist>
    <objarg name="limit" optional="1" type="int">
      <digest>
        Sets the count limit
      </digest>
      <description>
        This argument sets the limit parameter:<br /><br />Sets the count limit.
      </description>
    </objarg>
    <objarg name="direction" optional="1" type="symbol">
      <digest>
        Sets the direction of counting
      </digest>
      <description>
        This argument sets the direction parameter:<br /><br />Sets the direction of counting.<br /><bullet>[0] - <m>up</m></bullet><bullet>[1] - <m>down</m></bullet>
      </description>
    </objarg>
    <objarg name="reset" optional="1" type="int">
      <digest>
        Sets the reset value
      </digest>
      <description>
        This argument sets the reset parameter:<br /><br />Sets the reset value. A value of -1 can be used for direction independent reset. This results in reset to 0 when counting up and (limit - 1) when counting down.
      </description>
    </objarg>
    <objarg name="mode" optional="1" type="symbol">
      <digest>
        Sets the mode
      </digest>
      <description>
        This argument sets the mode parameter:<br /><br />Sets the mode:<br /><bullet>[0] - <m>run</m> - the count continues until it hits the limit or zero.</bullet><bullet>[1] - <m>loop</m> - the count loops between zero and the limit minus one.</bullet><bullet>[2] - <m>pause</m> - the count is paused until the mode is changed.</bullet><bullet>[3] - <m>stop</m> - the count returns to the reset value until the mode is changed.</bullet>
      </description>
    </objarg>
    <objarg name="idle" optional="1" type="symbol">
      <digest>
        Sets the idle output (the output when stopped, paused or out of bounds)
      </digest>
      <description>
        This argument sets the idle parameter:<br /><br />Sets the idle output (the output when stopped, paused or out of bounds):<br /><bullet>[0] - <m>repeat</m> - repeat the current count.</bullet><bullet>[1] - <m>empty</m> - output an empty frame.</bullet>
      </description>
    </objarg>
  </objarglist>
  <methodlist>
    <method name="info">
      <arglist>
        <arg name="items" optional="1" type="list" />
      </arglist>
      <digest>
        Get Object Info
      </digest>
      <description>
        Print info about <o>fl.ticks~</o> to the max window for reference purposes. If no arguments are provided then all information is posted to the Max window. Else a set of flags is used to select which sections of the reference to display, and whether or not the information should be provided in a shortened form.<br /> <br />The following flags are available:<br /><br /><bullet><m>description</m> - display the object description.</bullet><bullet><m>inputs</m> - display info on inputs.</bullet><bullet><m>outputs</m> - display info on outputs.</bullet><bullet><m>io</m> - display info on both inputs and outputs.</bullet><bullet><m>parameters</m> - display info on the object parameters.</bullet><bullet><m>quick</m> - display shorten versions of any info displayed.</bullet>
      </description>
    </method>
    <method name="frame">
      <arglist />
      <digest>
        Connect FrameLib objects
      </digest>
      <description>
        Used internally by FrameLib's connection routines. User messages have no effect.
      </description>
    </method>
    <method name="sync">
      <arglist />
      <digest>
        Synchronise FrameLib audio objects
      </digest>
      <description>
        Used internally by FrameLib's connection routines. User messages have no effect.
      </description>
    </method>
  </methodlist>
  <attributelist>
    <attribute name="rt" get="1" set="1" type="int" size="1">
      <digest>
        Realtime flag
      </digest>
      <description>
        Sets the realtime state for <o>fl.ticks~</o>. When set to <m>0</m> <o>fl.ticks~</o> forms part of a non-realtime network for performing offline processing in Max message threads. This mode of operation uses <o>buffer~</o> objects for audio IO.<br /><br />More info on non-realtime processing with FrameLib can be found in <link name="11_fl_nrt" module="framelib" type="tutorial">Tutorial 11</link>.
      </description>
      <attributelist>
        <attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
        <attribute name="label" get="1" set="1" type="symbol" size="1" value="Realtime" />
      </attributelist>
    </attribute>
    <attribute name="id" get="1" set="1" type="symbol" size="1">
      <digest>
        Context ID
      </digest>
      <description>
        Sets the context name for <o>fl.ticks~</o> in order to determine distinct processing contexts.<br /><br />More info on FrameLib contexts can be found in <link name="10_fl_contexts" module="framelib" type="tutorial">Tutorial 10</link>.
      </description>
      <attributelist>
        <attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
        <attribute name="label" get="1" set="1" type="symbol" size="1" value="ID" />
      </attributelist>
    </attribute>
  </attributelist>
  <seealsolist>
    <seealso name="fl.now~" />
    <seealso name="fl.timedelta~" />
    <seealso name="fl.timer~" />
  </seealsolist>
  <misc name="Discussion">
    <entry name="Keywords">
      <description>timing</description>
    </entry>
  </misc>
</c74object>
