{
    "fl.poltocar~": {
        "digest": "Converts from polar values at the inputs to cartesian values at the outputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spatial"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~"
        ]
    },
    "fl.spatial~": {
        "digest": "Generates multiplication factors for a number of speakers from an input coordinate triple.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spatial"
        ],
        "keywords": [
            "spatialiastion"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~"
        ]
    },
    "fl.cartopol~": {
        "digest": "Converts from cartesian values at the inputs to polar values at the outputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spatial"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.unpack~": {
        "digest": "Unpacks multistream input into individual streams.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Streaming"
        ],
        "keywords": [
            "multistreaming",
            "streams"
        ],
        "seealso": [
            "fl.pack~",
            "fl.streamid~"
        ]
    },
    "fl.streamid~": {
        "digest": "Outputs the stream id for each stream in a multistream connection.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Streaming"
        ],
        "keywords": [
            "multistreaming",
            "streams"
        ],
        "seealso": [
            "fl.pack~",
            "fl.unpack~"
        ]
    },
    "fl.pack~": {
        "digest": "Packs multiple frame streams into a multistream output.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Streaming"
        ],
        "keywords": [
            "multistreaming",
            "streams"
        ],
        "seealso": [
            "fl.unpack~",
            "fl.streamid~"
        ]
    },
    "fl.dispatch~": {
        "digest": "Dispatches multiple inputs dynamically to multiple outputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Routing"
        ],
        "keywords": [
            "routing"
        ],
        "seealso": [
            "fl.route~",
            "fl.select~"
        ]
    },
    "fl.route~": {
        "digest": "Routes the input to one of a number of outputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Routing"
        ],
        "keywords": [
            "routing"
        ],
        "seealso": [
            "fl.dispatch~",
            "fl.select~"
        ]
    },
    "fl.select~": {
        "digest": "Selects output from a number of inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Routing"
        ],
        "keywords": [
            "routing"
        ],
        "seealso": [
            "fl.dispatch~",
            "fl.route~"
        ]
    },
    "fl.timedelta~": {
        "digest": "Calculates the time interval between consecutive incoming frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Timing"
        ],
        "keywords": [
            "timing"
        ],
        "seealso": [
            "fl.now~",
            "fl.timer~",
            "fl.ticks~"
        ]
    },
    "fl.timer~": {
        "digest": "Calculates the time elapsed between the each trigger input and the previous reset.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Timing"
        ],
        "keywords": [
            "timing"
        ],
        "seealso": [
            "fl.timedelta~",
            "fl.now~",
            "fl.ticks~"
        ]
    },
    "fl.now~": {
        "digest": "Outputs the current time.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Timing"
        ],
        "keywords": [
            "timing"
        ],
        "seealso": [
            "fl.timedelta~",
            "fl.timer~",
            "fl.ticks~"
        ]
    },
    "fl.ticks~": {
        "digest": "Counts incoming frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Timing"
        ],
        "keywords": [
            "timing"
        ],
        "seealso": [
            "fl.timedelta~",
            "fl.now~",
            "fl.timer~"
        ]
    },
    "fl.sort~": {
        "digest": "Sorts an input frame into ascending or descending order.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.shift~": {
        "digest": "Shifts samples within a frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.accumpos~": {
        "digest": "Finds the index where the cumulative sum reaches a specified percentage of its total.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.framemin~": {
        "digest": "Calculates the minimum value of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.centroid~": {
        "digest": "Calculates the centroid of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.medianfilter~": {
        "digest": "Applies a median or other specified percentiled filter to the input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~"
        ]
    },
    "fl.percentile~": {
        "digest": "Calculates a specified percentile of the input frame (by default the 50th or median).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.kurtosis~": {
        "digest": "Calculates the kurtosis of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.maxpos~": {
        "digest": "Calculates the index of the maximum value of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.nonzero~": {
        "digest": "Outputs the indices of input samples that are non-zero.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.stddev~": {
        "digest": "Calculates the standard deviation of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.flatness~": {
        "digest": "Calculates the flatness (as a ratio) of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.skewness~": {
        "digest": "Calculates the skewness of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.kernelsmooth~": {
        "digest": "Smooth an input based on a provided smoothing kernel.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "smoothing"
        ],
        "seealso": [
            "fl.peaks~",
            "fl.multitaper~"
        ]
    },
    "fl.join~": {
        "digest": "Concatenates all input frames into a single output frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.length~": {
        "digest": "Calculates the length of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.mean~": {
        "digest": "Calculates the mean of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.framemax~": {
        "digest": "Calculates the maximum value of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.rms~": {
        "digest": "Calculates the rms of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.pad~": {
        "digest": "Pads the input frame with a repeated specified value.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.reverse~": {
        "digest": "Computes the reverse of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.pattern~": {
        "digest": "Step through a frame of values (or pattern) one at a time.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.sum~": {
        "digest": "Calculates the sum of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.nanfilter~": {
        "digest": "Filter NaNs from the input either by replacing or by removing them.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.geomean~": {
        "digest": "Calculates the geometric mean of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.split~": {
        "digest": "Splits input frames into two frames, given a specified split point.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.medianfilter~"
        ]
    },
    "fl.subframe~": {
        "digest": "Output a specified segment of an input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.minpos~": {
        "digest": "Calculates the index of the minimum value of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.product~": {
        "digest": "Calculates the product of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.crest~": {
        "digest": "Calculates the crest factor of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.chop~": {
        "digest": "Chops input frames into equally sized output frames of a specified size.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.peaks~": {
        "digest": "Finds peaks in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.spread~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.prioritise~": {
        "digest": "Apply a fixed priority ranking to synchronous input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.chain~"
        ]
    },
    "fl.spread~": {
        "digest": "Calculates the spread of the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Vector"
        ],
        "keywords": [
            "vector"
        ],
        "seealso": [
            "fl.minpos~",
            "fl.percentile~",
            "fl.stddev~",
            "fl.centroid~",
            "fl.accumpos~",
            "fl.nonzero~",
            "fl.maxpos~",
            "fl.geomean~",
            "fl.framemax~",
            "fl.kurtosis~",
            "fl.sort~",
            "fl.mean~",
            "fl.join~",
            "fl.shift~",
            "fl.framemin~",
            "fl.sum~",
            "fl.subframe~",
            "fl.nanfilter~",
            "fl.reverse~",
            "fl.length~",
            "fl.peaks~",
            "fl.pattern~",
            "fl.product~",
            "fl.skewness~",
            "fl.crest~",
            "fl.pad~",
            "fl.chop~",
            "fl.flatness~",
            "fl.rms~",
            "fl.split~",
            "fl.medianfilter~"
        ]
    },
    "fl.complex.minus~": {
        "digest": "Subtracts complex values in the right input frame pair from those in the left pair.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Binary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.pow~",
            "fl.complex.plus~",
            "fl.complex.divide~",
            "fl.complex.times~"
        ]
    },
    "fl.complex.times~": {
        "digest": "Multiplies complex values in the two pairs of input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Binary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.pow~",
            "fl.complex.minus~",
            "fl.complex.plus~",
            "fl.complex.divide~"
        ]
    },
    "fl.complex.pow~": {
        "digest": "Raises left operand values to the power of right operand values (both complex).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Binary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.minus~",
            "fl.complex.plus~",
            "fl.complex.divide~",
            "fl.complex.times~"
        ]
    },
    "fl.complex.divide~": {
        "digest": "Divides complex values in the left pair of input frames by those in the right pair.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Binary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.pow~",
            "fl.complex.minus~",
            "fl.complex.plus~",
            "fl.complex.times~"
        ]
    },
    "fl.complex.plus~": {
        "digest": "Adds complex values in the two pairs of input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Binary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.pow~",
            "fl.complex.minus~",
            "fl.complex.divide~",
            "fl.complex.times~"
        ]
    },
    "fl.read~": {
        "digest": "Reads from a specified host buffer given an input frame of positions.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Buffer"
        ],
        "keywords": [
            "buffer"
        ],
        "seealso": [
            "fl.info~",
            "ibuffer"
        ]
    },
    "fl.info~": {
        "digest": "Outputs the sample rate, number of channels and length of a specified buffer.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Buffer"
        ],
        "keywords": [
            "buffer"
        ],
        "seealso": [
            "fl.read~",
            "ibuffer"
        ]
    },
    "fl.exp2~": {
        "digest": "Calculates the exponent base 2 (2^x) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.asinh~": {
        "digest": "Calculates the hyperbolic arcsine of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.log~": {
        "digest": "Calculates the logarithm base e of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.erf~": {
        "digest": "Calculates the error function of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.exp~": {
        "digest": "Calculates the exponent base e (e^x) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.sin~": {
        "digest": "Calculates the sine (for arguments in radians) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~"
        ]
    },
    "fl.log2~": {
        "digest": "Calculates the logarithm base 2 of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.asin~": {
        "digest": "Calculates the arcsine (in radians) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.acos~": {
        "digest": "Calculates the arccosine (in radians) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.cos~": {
        "digest": "Calculates the cosine (for arguments in radians) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.sinh~": {
        "digest": "Calculates the hyperbolic sine of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.floor~": {
        "digest": "Calculates the floor function of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.trunc~": {
        "digest": "Calculates the truncated value of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.log10~": {
        "digest": "Calculates the logarithm base 10 of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.atanh~": {
        "digest": "Calculates the hyperbolic arctangent of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.sqrt~": {
        "digest": "Calculates the square root of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.acosh~": {
        "digest": "Calculates the hyperbolic arccosine of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.tan~": {
        "digest": "Calculates the tangent (for arguments in radians) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.sin~"
        ]
    },
    "fl.not~": {
        "digest": "Calculates the logical not of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.atan~": {
        "digest": "Calculates the arctangent (in radians) of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.tanh~": {
        "digest": "Calculates the hyperbolic tangent of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.erfc~": {
        "digest": "Calculates the complimentary error function of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.abs~": {
        "digest": "Calculates the absolute value of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.round~": {
        "digest": "Calculates the rounded value of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.cbrt~": {
        "digest": "Calculates the cube root of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.cosh~": {
        "digest": "Calculates the hyperbolic cosine of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.ceil~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.ceil~": {
        "digest": "Calculates the ceiling function of each value in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Unary"
        ],
        "keywords": [
            "unary ops",
            "operators"
        ],
        "seealso": [
            "fl.sqrt~",
            "fl.floor~",
            "fl.exp2~",
            "fl.tanh~",
            "fl.cbrt~",
            "fl.cos~",
            "fl.atanh~",
            "fl.acosh~",
            "fl.atan~",
            "fl.erf~",
            "fl.cosh~",
            "fl.asin~",
            "fl.exp~",
            "fl.log10~",
            "fl.log2~",
            "fl.erfc~",
            "fl.acos~",
            "fl.abs~",
            "fl.log~",
            "fl.asinh~",
            "fl.trunc~",
            "fl.not~",
            "fl.sinh~",
            "fl.round~",
            "fl.tan~",
            "fl.sin~"
        ]
    },
    "fl.copysign~": {
        "digest": "Copys the signs of the right input frame onto the magnitudes of the left input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.greaterthaneq~": {
        "digest": "Compares input frames using a greater than or equal to operation (returns 1 or 0).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.modulo~"
        ]
    },
    "fl.greaterthan~": {
        "digest": "Compares input frames using a greater than operation (returns 1 or 0).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.or~": {
        "digest": "Calculates the logical or of the left and right input frame values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.and~": {
        "digest": "Calculates the logical and of the left and right input frame values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.times~": {
        "digest": "Multiplies values in the two input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.divide~": {
        "digest": "Divides the left input frame values by the right input frame values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.minus~": {
        "digest": "Subtracts the right input frame values from the left input frame values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.pow~": {
        "digest": "Raises left input frame values to the power of right input frame values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.atan2~": {
        "digest": "Calculates the arctangent using two arguments (left operand is y, right operand is x).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.notequals~": {
        "digest": "Compares frame values for inequality (returns 1 or 0).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.lessthaneq~": {
        "digest": "Compares input frames using a less than or equal to operation (returns 1 or 0).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.max~": {
        "digest": "Calculates the maximums of pairs of values in the two input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.plus~": {
        "digest": "Adds values in the two input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.modulo~": {
        "digest": "Calculates the left input frame values modulo the right input frame values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~"
        ]
    },
    "fl.lessthan~": {
        "digest": "Compares input frames using a less than operation (returns 1 or 0).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.diff~": {
        "digest": "Calculates the absolute differences between values in the two input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.equals~": {
        "digest": "Compares frame values for equality (returns 1 or 0).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.hypot~": {
        "digest": "Calculates the length of a hypotenuse given the two operands as the other lengths.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.min~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.min~": {
        "digest": "Calculates the minimums of pairs of values in the two input frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Binary"
        ],
        "keywords": [
            "binary ops, operators"
        ],
        "seealso": [
            "fl.lessthan~",
            "fl.atan2~",
            "fl.minus~",
            "fl.hypot~",
            "fl.equals~",
            "fl.times~",
            "fl.pow~",
            "fl.divide~",
            "fl.max~",
            "fl.notequals~",
            "fl.greaterthan~",
            "fl.and~",
            "fl.lessthaneq~",
            "fl.diff~",
            "fl.plus~",
            "fl.or~",
            "fl.copysign~",
            "fl.greaterthaneq~",
            "fl.modulo~"
        ]
    },
    "fl.uniform~": {
        "digest": "Generates frames in which all values are identical.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Generators"
        ],
        "keywords": [
            "generators"
        ],
        "seealso": [
            "fl.random~",
            "fl.gaussian~",
            "fl.ramp~"
        ]
    },
    "fl.random~": {
        "digest": "Generates linearly distributed random values in the range [0-1].",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Generators"
        ],
        "keywords": [
            "generators"
        ],
        "seealso": [
            "fl.gaussian~",
            "fl.uniform~",
            "fl.ramp~"
        ]
    },
    "fl.gaussian~": {
        "digest": "Generates frames of normally distributed random values.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Generators"
        ],
        "keywords": [
            "generators"
        ],
        "seealso": [
            "fl.random~",
            "fl.uniform~",
            "fl.ramp~"
        ]
    },
    "fl.makewindow~": {
        "digest": "Generates a specified window function across each output frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Generators"
        ],
        "keywords": [
            "FFT, windowing"
        ],
        "seealso": [
            "fl.window~"
        ]
    },
    "fl.ramp~": {
        "digest": "Generates a linear ramp across each output frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Generators"
        ],
        "keywords": [
            "generators"
        ],
        "seealso": [
            "fl.random~",
            "fl.gaussian~",
            "fl.uniform~"
        ]
    },
    "fl.tomax~": {
        "digest": "Turn frames into host messages or control signals.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Host_Communication"
        ],
        "keywords": [
            "conversion"
        ],
        "seealso": [
            "fl.frommax~"
        ]
    },
    "fl.frommax~": {
        "digest": "Turn messages or control signals from the host into frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Host_Communication"
        ],
        "keywords": [
            "conversion"
        ],
        "seealso": [
            "fl.tomax~"
        ]
    },
    "fl.sink~": {
        "digest": "Outputs frames to the host environment as audio by overlap-adding into an output buffer.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib IO"
        ],
        "keywords": [
            "conversion"
        ],
        "seealso": [
            "fl.source~",
            "fl.trace~"
        ]
    },
    "fl.trace~": {
        "digest": "Outputs values from the input as audio, continuing the last value till a new frame arrives.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib IO"
        ],
        "keywords": [
            "conversion"
        ],
        "seealso": [
            "fl.source~",
            "fl.sink~"
        ]
    },
    "fl.source~": {
        "digest": "Captures audio from the host environment and outputs the most recent values as frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib IO"
        ],
        "keywords": [
            "conversion"
        ],
        "seealso": [
            "fl.trace~",
            "fl.sink~"
        ]
    },
    "fl.convolve~": {
        "digest": "Convolves two inputs (either real or complex).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "FFT, windowing, frequency domain"
        ],
        "seealso": [
            "fl.fft~",
            "fl.multitaper~",
            "fl.ifft~",
            "fl.correlate~",
            "fl.window~"
        ]
    },
    "fl.multitaper~": {
        "digest": "Calculates a multitaper power (or amplitude) spectrum from a real input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "FFT, windowing, frequency domain"
        ],
        "seealso": [
            "fl.fft~",
            "fl.convolve~",
            "fl.ifft~",
            "fl.correlate~",
            "fl.window~"
        ]
    },
    "fl.firphase~": {
        "digest": "Transform FIR coefficients to preserve the amplitude spectrum but alter the phase.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "filters"
        ],
        "seealso": [
            "fl.biquad~"
        ]
    },
    "fl.correlate~": {
        "digest": "Correlates two inputs (either real or complex).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "FFT, windowing, frequency domain"
        ],
        "seealso": [
            "fl.fft~",
            "fl.multitaper~",
            "fl.convolve~",
            "fl.ifft~",
            "fl.window~"
        ]
    },
    "fl.fft~": {
        "digest": "Calculate the real or complex Fast Fourier Transform of the input(s).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "FFT, windowing, frequency domain"
        ],
        "seealso": [
            "fl.multitaper~",
            "fl.convolve~",
            "fl.ifft~",
            "fl.correlate~",
            "fl.window~"
        ]
    },
    "fl.ifft~": {
        "digest": "Calculate the real or complex inverse Fast Fourier Transform of the inputs (real and imaginary).",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "FFT, windowing, frequency domain"
        ],
        "seealso": [
            "fl.fft~",
            "fl.multitaper~",
            "fl.convolve~",
            "fl.correlate~",
            "fl.window~"
        ]
    },
    "fl.window~": {
        "digest": "Multiplies the input frame by a specified window.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Spectral"
        ],
        "keywords": [
            "FFT, windowing, frequency domain"
        ],
        "seealso": [
            "fl.fft~",
            "fl.multitaper~",
            "fl.convolve~",
            "fl.ifft~",
            "fl.correlate~"
        ]
    },
    "fl.store~": {
        "digest": "Stores frames remotely for later recall.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Storage"
        ],
        "keywords": [
            "storage"
        ],
        "seealso": [
            "fl.register~",
            "fl.recall~"
        ]
    },
    "fl.register~": {
        "digest": "Store and recall frames locally.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Storage"
        ],
        "keywords": [
            "storage"
        ],
        "seealso": [
            "fl.store~",
            "fl.recall~"
        ]
    },
    "fl.recall~": {
        "digest": "Recall a remotely stored frame for use.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Storage"
        ],
        "keywords": [
            "storage"
        ],
        "seealso": [
            "fl.store~",
            "fl.register~"
        ]
    },
    "fl.timemedian~": {
        "digest": "Calculates the specified percentile per sample over the most recent frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Time_Smoothing"
        ],
        "keywords": [
            "time smoothing",
            "statistics"
        ],
        "seealso": [
            "fl.timestddev~",
            "fl.lag~",
            "fl.framedelta~",
            "fl.timemean~"
        ]
    },
    "fl.framedelta~": {
        "digest": "Outputs the deltas between consecutive frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Time_Smoothing"
        ],
        "keywords": [
            "time smoothing",
            "statistics"
        ],
        "seealso": [
            "fl.timestddev~",
            "fl.timemedian~",
            "fl.lag~",
            "fl.timemean~"
        ]
    },
    "fl.lag~": {
        "digest": "Delay vector type input by a whole number of frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Time_Smoothing"
        ],
        "keywords": [
            "time smoothing",
            "statistics"
        ],
        "seealso": [
            "fl.timestddev~",
            "fl.timemedian~",
            "fl.framedelta~",
            "fl.timemean~"
        ]
    },
    "fl.timemean~": {
        "digest": "Calculates the mean per sample over the most recent frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Time_Smoothing"
        ],
        "keywords": [
            "time smoothing",
            "statistics"
        ],
        "seealso": [
            "fl.timestddev~",
            "fl.timemedian~",
            "fl.lag~",
            "fl.framedelta~"
        ]
    },
    "fl.timestddev~": {
        "digest": "Calculates the standard deviation per sample over the most recent frames.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Time_Smoothing"
        ],
        "keywords": [
            "time smoothing",
            "statistics"
        ],
        "seealso": [
            "fl.timemedian~",
            "fl.lag~",
            "fl.framedelta~",
            "fl.timemean~"
        ]
    },
    "fl.movingaverage~": {
        "digest": "Calculates per sample moving averages and standard deviations.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Time_Smoothing"
        ],
        "keywords": [
            "time smoothing",
            "statistics"
        ],
        "seealso": [
            "fl.timestddev~",
            "fl.timemedian~",
            "fl.framedelta~",
            "fl.timemean~"
        ]
    },
    "fl.perblock~": {
        "digest": "Schedules one frame at the start of each host audio block.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Schedulers"
        ],
        "keywords": [
            "timing, schedulers",
            "triggers"
        ],
        "seealso": [
            "fl.interval~",
            "fl.audiotrigger~",
            "fl.once~",
            "fl.chain~",
            "fl.future~"
        ]
    },
    "fl.once~": {
        "digest": "Schedules a single frame at the begining of time that lasts forever.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Schedulers"
        ],
        "keywords": [
            "timing, schedulers",
            "triggers"
        ],
        "seealso": [
            "fl.interval~",
            "fl.perblock~",
            "fl.audiotrigger~",
            "fl.chain~",
            "fl.future~"
        ]
    },
    "fl.audiotrigger~": {
        "digest": "Schedules frames based on non-zero audio input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Schedulers"
        ],
        "keywords": [
            "timing, schedulers",
            "triggers"
        ],
        "seealso": [
            "fl.interval~",
            "fl.perblock~",
            "fl.once~",
            "fl.chain~",
            "fl.future~"
        ]
    },
    "fl.interval~": {
        "digest": "Schedules frames at regular intervals set by the interval parameter.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Schedulers"
        ],
        "keywords": [
            "timing, schedulers",
            "triggers"
        ],
        "seealso": [
            "fl.perblock~",
            "fl.audiotrigger~",
            "fl.once~",
            "fl.chain~",
            "fl.future~"
        ]
    },
    "fl.chain~": {
        "digest": "Schedules frames in the future at times specified times in the input frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Schedulers"
        ],
        "keywords": [
            "timing, schedulers",
            "triggers"
        ],
        "seealso": [
            "fl.interval~",
            "fl.perblock~",
            "fl.audiotrigger~",
            "fl.once~",
            "fl.future~"
        ]
    },
    "fl.complex.sinh~": {
        "digest": "Calculates the hyperbolic sine of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.cos~": {
        "digest": "Calculates the cosine of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.sin~": {
        "digest": "Calculates the sine of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.exp~": {
        "digest": "Calculates the exponent base e (e^x) of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.log~": {
        "digest": "Calculates the logarithm base e of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.cosh~": {
        "digest": "Calculates the hyperbolic cosine of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.log10~": {
        "digest": "Calculates the logarithm base 10 of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.tanh~": {
        "digest": "Calculates the hyperbolic tangent of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.tan~": {
        "digest": "Calculates the tangent of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.conj~": {
        "digest": "Calculates the complex conjugate of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.complex.sqrt~",
            "fl.poltocar~"
        ]
    },
    "fl.complex.sqrt~": {
        "digest": "Calculates the square root of each complex value at the inputs.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Complex_Unary"
        ],
        "keywords": [
            "complex numbers",
            "complex operators"
        ],
        "seealso": [
            "fl.complex.cos~",
            "fl.complex.log10~",
            "fl.complex.sinh~",
            "fl.cartopol~",
            "fl.complex.conj~",
            "fl.complex.exp~",
            "fl.complex.log~",
            "fl.complex.cosh~",
            "fl.complex.tan~",
            "fl.complex.sin~",
            "fl.complex.tanh~",
            "fl.poltocar~"
        ]
    },
    "fl.wrap~": {
        "digest": "Wraps the incoming frame into the range delimited by the two parameters.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Ternary"
        ],
        "keywords": [
            "ternary ops",
            "operators"
        ],
        "seealso": [
            "fl.clip~",
            "fl.fold~"
        ]
    },
    "fl.fold~": {
        "digest": "Folds the incoming frame into the range delimited by the two parameters.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Ternary"
        ],
        "keywords": [
            "ternary ops",
            "operators"
        ],
        "seealso": [
            "fl.wrap~",
            "fl.clip~"
        ]
    },
    "fl.clip~": {
        "digest": "Clips the incoming frame to the range delimited by the two parameters.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Ternary"
        ],
        "keywords": [
            "ternary ops",
            "operators"
        ],
        "seealso": [
            "fl.wrap~",
            "fl.fold~"
        ]
    },
    "fl.lookup~": {
        "digest": "Lookup values from one input using a table provided at another.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Mapping"
        ],
        "keywords": [
            "scaling",
            "mapping"
        ],
        "seealso": [
            "fl.convert~",
            "fl.map~",
            "fl.constant~",
            "fl.samplerate~"
        ]
    },
    "fl.convert~": {
        "digest": "Converts the input vector according to a specified conversion.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Mapping"
        ],
        "keywords": [
            "scaling",
            "mapping"
        ],
        "seealso": [
            "fl.map~",
            "fl.constant~",
            "fl.samplerate~",
            "fl.lookup~"
        ]
    },
    "fl.constant~": {
        "digest": "Outputs a specified constant.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Mapping"
        ],
        "keywords": [
            "scaling",
            "mapping"
        ],
        "seealso": [
            "fl.convert~",
            "fl.map~",
            "fl.samplerate~",
            "fl.lookup~"
        ]
    },
    "fl.map~": {
        "digest": "Maps values from input to output via a specified scaling.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Mapping"
        ],
        "keywords": [
            "scaling",
            "mapping"
        ],
        "seealso": [
            "fl.convert~",
            "fl.constant~",
            "fl.samplerate~",
            "fl.lookup~"
        ]
    },
    "fl.samplerate~": {
        "digest": "Convert or output values based on the sample rate.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Mapping"
        ],
        "keywords": [
            "scaling",
            "mapping"
        ],
        "seealso": [
            "fl.convert~",
            "fl.map~",
            "fl.constant~",
            "fl.lookup~"
        ]
    },
    "fl.onepolezero~": {
        "digest": "Applies a one-pole with one-zero filter to the input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Filters"
        ],
        "keywords": [
            "filters"
        ],
        "seealso": [
            "fl.svf~",
            "fl.sallenkey~",
            "fl.onepole~"
        ]
    },
    "fl.biquad~": {
        "digest": "Applies a biquad filter to the input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Filters"
        ],
        "keywords": [
            "filters"
        ],
        "seealso": [
            "fl.biquadcoeff~"
        ]
    },
    "fl.biquadcoeff~": {
        "digest": "Calculates biquad filter coefficients.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Filters"
        ],
        "keywords": [
            "filters"
        ],
        "seealso": [
            "fl.biquad~"
        ]
    },
    "fl.svf~": {
        "digest": "Applies a state variable filter to the input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Filters"
        ],
        "keywords": [
            "filters"
        ],
        "seealso": [
            "fl.onepolezero~",
            "fl.onepole~"
        ]
    },
    "fl.onepole~": {
        "digest": "Applies  a one-pole 6dB/octave filter to the input.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Filters"
        ],
        "keywords": [
            "filters"
        ],
        "seealso": [
            "fl.svf~",
            "fl.sallenkey~",
            "fl.onepolezero~"
        ]
    },
    "fl.complex.expr~": {
        "digest": "Calculates the result of a mathematical expression involving complex numbers.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Expressions"
        ],
        "keywords": [
            "expression"
        ],
        "seealso": [
            "fl.expr~"
        ]
    },
    "fl.expr~": {
        "digest": "Calculates the result of a mathematical expression.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Expressions"
        ],
        "keywords": [
            "expression"
        ],
        "seealso": [
            "fl.complex.expr~"
        ]
    },
    "fl.filtertags~": {
        "digest": "Filters tagged frames using a set of specified tags.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Parameters"
        ],
        "keywords": [
            "parameters"
        ],
        "seealso": [
            "fl.tag~",
            "fl.untag~",
            "fl.combinetags~",
            "fl.getparam~"
        ]
    },
    "fl.tag~": {
        "digest": "Tags vectors with tags either in order to set parameters or for routing purposes.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Parameters"
        ],
        "keywords": [
            "parameters"
        ],
        "seealso": [
            "fl.untag~",
            "fl.combinetags~",
            "fl.getparam~",
            "fl.filtertags~"
        ]
    },
    "fl.untag~": {
        "digest": "Retrieves vectors from a tagged frame according to a specified set of tags.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Parameters"
        ],
        "keywords": [
            "parameters"
        ],
        "seealso": [
            "fl.tag~",
            "fl.combinetags~",
            "fl.getparam~",
            "fl.filtertags~"
        ]
    },
    "fl.combinetags~": {
        "digest": "Combines a number of tagged input frames into a single tagged output frame.",
        "module": "FrameLib",
        "category": [
            "FrameLib",
            "FrameLib Parameters"
        ],
        "keywords": [
            "parameters"
        ],
        "seealso": [
            "fl.tag~",
            "fl.untag~",
            "fl.getparam~",
            "fl.filtertags~"
        ]
    }
}