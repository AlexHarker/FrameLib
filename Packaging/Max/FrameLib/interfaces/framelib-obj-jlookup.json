{
    "fl.sort~": {
        "1": {
            "name": "/order [enum]",
            "description": "Sets the ordering of the sorted output.\n\nParameter Options:\n[0] - up\n[1] - down\n\n(default: up)"
        },
        "2": {
            "name": "/indices [bool]",
            "description": "Performs the sort on the indices of the input rather than the values.\n\n(default: false)"
        }
    },
    "fl.complex.sinh~": {
        "1": {
            "name": null,
            "description": "fl.complex.sinh~ has no parameters."
        }
    },
    "fl.shift~": {
        "1": {
            "name": "/shift [double]",
            "description": "Sets the shift amount (-ve for left shift / +ve for right shift).\n\n(default: 0)"
        },
        "2": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "3": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour:\n\nParameter Options:\n[0] - pad - values beyond the edges of the input are read as the padding value.\n[1] - extend - the edge values are extended infinitely in either direction.\n[2] - wrap - values are read as wrapped or cyclical.\n[3] - fold - values are folded at edges without repetition of the edge values.\n[4] - mirror - values are mirrored at edges with the edge values repeated.\n\n(default: pad)"
        },
        "4": {
            "name": "/units [enum]",
            "description": "Sets the units for the shift (samples or ratio of the input length [-1 to 1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios\n\n(default: samples)"
        }
    },
    "fl.tomax~": {
        "1": {
            "name": null,
            "description": "fl.tomax~ has no parameters."
        }
    },
    "fl.sink~": {
        "1": {
            "name": "/buffer_size [double]",
            "description": "INSTANTIATION ONLY\n\nSets the internal buffer size in the units specified by the units parameter.\n\n(default: 250000, min: 0)"
        },
        "2": {
            "name": "/units [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the time units used to determine the buffer size and delay.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "3": {
            "name": "/delay [double]",
            "description": "Sets the output delay in the units specified by the units parameter.\n\n(default: 0, min: 0)"
        },
        "4": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none - no interpolation.\n[1] - linear - linear interpolation.\n[2] - hermite - cubic hermite interpolation (incurs a minimum delay or latency of one sample).\n[3] - bspline - cubic bspline interpolation (incurs a minimum delay or latency of one sample).\n[4] - lagrange - cubic lagrange interpolation (incurs a minimum delay or latency of one sample).\n\n(default: none)"
        }
    },
    "fl.copysign~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.accumpos~": {
        "1": {
            "name": "/percentage [double]",
            "description": "Sets the percentage of the sum used for calculation [0-100].\n\n(default: 50, clipped: 0-100)"
        },
        "2": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "3": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.framemin~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: inf)"
        }
    },
    "fl.contextcontrol~": {},
    "fl.greaterthaneq~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.complex.cos~": {
        "1": {
            "name": null,
            "description": "fl.complex.cos~ has no parameters."
        }
    },
    "fl.makestring~": {
        "1": {
            "name": "/num_items [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of items.\n\n(default: 1, clipped: 1-10)"
        },
        "2": {
            "name": "/tag [string]",
            "description": "Sets the output tag."
        },
        "3": {
            "name": "/trigger_ins [variable length bool array]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output using an array of bools. By default all inputs trigger output.\n\n(default: true, max size: 10)"
        },
        "4": {
            "name": "/padding [variable length int array]",
            "description": "Sets the zero padding for each input using an array of integers. By default there is no zero padding.\n\n(default: 0, max size: 10)"
        },
        "5": {
            "name": "/item_01...10 [string]",
            "description": "Sets the string or input for item N [1-10]."
        }
    },
    "fl.greaterthan~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.unpack~": {
        "1": {
            "name": "/num_outs [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of single stream outputs.\n\n(default: 2)"
        }
    },
    "fl.complex.sin~": {
        "1": {
            "name": null,
            "description": "fl.complex.sin~ has no parameters."
        }
    },
    "fl.complex.minus~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes).\n\n(default: 0, size: 2)"
        }
    },
    "fl.or~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.exp2~": {
        "1": {
            "name": null,
            "description": "fl.exp2~ has no parameters."
        }
    },
    "fl.complex.times~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes).\n\n(default: 0, size: 2)"
        }
    },
    "fl.convolve~": {
        "1": {
            "name": "/max_length [int]",
            "description": "INSTANTIATION ONLY\n\nSets the maximum processing length. The processing length is M + N - 1 where M and N are the lengths of the two inputs.\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/mode [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the type of input and output.\n\nParameter Options:\n[0] - real\n[1] - complex\n\n(default: real)"
        },
        "3": {
            "name": "/edges [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the edge behaviour of the convolution process. The basic operation is a linear one with output of the processing length. For modes other than linear the output length is reduced to the maximum of M and N. Excess from the linear operation is added back into the available length as specified:\n\nParameter Options:\n[0] - linear - the output is the full processing length with no further processing.\n[1] - circular - excess at the end is added back to the beginning of the output.\n[2] - wrap - as circular mode but rotated such that wrapping occurs equally at both ends.\n[3] - fold - as wrap but folding not wrapping at the edges (edge values are not repeated).\n[4] - mirror - as fold but with repeated edge values.\n\n(default: linear)"
        }
    },
    "fl.centroid~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.medianfilter~": {
        "1": {
            "name": "/width [int]",
            "description": "Sets the width of the filtering in samples.\n\n(default: 1, min: 1)"
        },
        "2": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "3": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for filtering:\n\nParameter Options:\n[0] - pad - values beyond the edges of the input are read as the padding value.\n[1] - extend - the edge values are extended infinitely in either direction.\n[2] - wrap - values are read as wrapped or cyclical.\n[3] - fold - values are folded at edges without repetition of the edge values.\n[4] - mirror - values are mirrored at edges with the edge values repeated.\n\n(default: pad)"
        },
        "4": {
            "name": "/percentile [double]",
            "description": "Sets the percentile to return.\n\n(default: 50, clipped: 0-100)"
        }
    },
    "fl.lookup~": {
        "1": {
            "name": "/scale [enum]",
            "description": "Sets the scaling of the input for lookup:\n\nParameter Options:\n[0] - samples - the input is read as sample indices for reading from the table.\n[1] - normalised - the input range [0 to 1] is mapped across the table.\n[2] - bipolar - the input range [-1 to 1] is mapped across the table.\n\nNote that the edge parameter is also accounted for normalised and bipolar modes. This adjusts the scaling to work sensibly with cyclical modes.\n\n(default: samples)"
        },
        "2": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for both interpolation and lookup:\n\nParameter Options:\n[0] - zero - values beyond the edges of the table are treated as zeros.\n[1] - extend - the edge values are extended infinitely in either direction.\n[2] - wrap - values are treated as wrapped or cyclical.\n[3] - fold - values are folded at edges without repetition of the edge values.\n[4] - mirror - values are mirrored at edges with the edge values repeated.\n[5] - extrapolate - values out of range are extrapolated via interpolation.\n\n(default: extrapolate)"
        },
        "3": {
            "name": "/bound [bool]",
            "description": "Sets whether lookup is bounded to the edges of the table, or can extend beyond it.\n\n(default: true)"
        },
        "4": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none - no interpolation.\n[1] - linear - linear interpolation.\n[2] - hermite - cubic hermite interpolation.\n[3] - bspline - cubic bspline interpolation.\n[4] - lagrange - cubic lagrange interpolation.\n\n(default: hermite)"
        }
    },
    "fl.wrap~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - smaller right inputs are read modulo against larger left input.\n[1] - shrink - the output length is set to the length of the smaller input.\n[2] - extend - smaller right inputs are extended by repeating their final value.\n\n(default: wrap)"
        }
    },
    "fl.complex.exp~": {
        "1": {
            "name": null,
            "description": "fl.complex.exp~ has no parameters."
        }
    },
    "fl.multitaper~": {
        "1": {
            "name": "/max_length [int]",
            "description": "INSTANTIATION ONLY\n\nSets the maximum input length (and associated internal FFT size).\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/num_tapers [int]",
            "description": "Sets the number of tapers to use.\n\n(default: 3, min: 1)"
        },
        "3": {
            "name": "/normalise [bool]",
            "description": "Sets normalisation on or off (such that the energy of a full-scale sine wave is 1).\n\n(default: true)"
        },
        "4": {
            "name": "/output [enum]",
            "description": "Sets whether to output values in terms of power or amplitude.\n\nParameter Options:\n[0] - power\n[1] - amplitude\n\n(default: amplitude)"
        },
        "5": {
            "name": "/weighting [enum]",
            "description": "Sets the weighting of the tapers:\n\nParameter Options:\n[0] - uniform - all tapers are weighted equally.\n[1] - linear - tapers are weighted linearly in a decreasing manner.\n[2] - parabolic - tapers are weighted with a parabola in a decreasing manner.\n\n(default: parabolic)"
        }
    },
    "fl.and~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.onepolezero~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter cutoff frequency.\n\n(default: 500, min: 0)"
        },
        "2": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode when multi-output mode is off:\n\nParameter Options:\n[0] - lowpass - low pass.\n[1] - highpass - high pass.\n\n(default: lowpass)"
        },
        "3": {
            "name": "/multi_output [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates an output per filter mode with all modes output simultaneously.\n\n(default: false)"
        },
        "4": {
            "name": "/dynamic [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates inputs for per sample values for each of the filter parameters. If an input is not provided the corresponding parameter value is used.\n\n(default: false)"
        },
        "5": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame.\n\n(default: true)"
        }
    },
    "fl.percentile~": {
        "1": {
            "name": "/percentile [double]",
            "description": "Sets the percentile to calculate [0-100].\n\n(default: 50, clipped: 0-100)"
        },
        "2": {
            "name": "/interpolate [bool]",
            "description": "Sets whether interpolation is used to estimate values between data points.\n\n(default: false)"
        },
        "3": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "4": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.firphase~": {
        "1": {
            "name": "/max_length [int]",
            "description": "INSTANTIATION ONLY\n\nSets the input length and maximum FFT size.\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/phase [double]",
            "description": "Sets the phase for the transformed FIR [0 to 1]. Minimum phase can be requested with a value of zero. Linear phase can be requested with value of a half. Maximum phase can be requested with a value of one.\n\n(default: 0, clipped: 0-1)"
        },
        "3": {
            "name": "/time_factor [double]",
            "description": "Sets the factor used to determine the length for zero padding the FIR before processing. The FIR is padded to at least its original length multiplied by this factor. Note that this needs to be accounted for when setting the max_length parameter.\n\n(default: 1, min: 1)"
        }
    },
    "fl.asinh~": {
        "1": {
            "name": null,
            "description": "fl.asinh~ has no parameters."
        }
    },
    "fl.times~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.kurtosis~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 1)"
        }
    },
    "fl.divide~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.minus~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.log~": {
        "1": {
            "name": null,
            "description": "fl.log~ has no parameters."
        }
    },
    "fl.pow~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.erf~": {
        "1": {
            "name": null,
            "description": "fl.erf~ has no parameters."
        }
    },
    "fl.filtertags~": {
        "1": {
            "name": "/num_filters [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of tags.\n\n(default: 1, clipped: 1-10)"
        },
        "2": {
            "name": "/tag_01...10 [string]",
            "description": "Sets tag number N [1-10]."
        }
    },
    "fl.convert~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the mode of conversion:\n\nParameter Options:\n[0] - db->amp - converts from decibels to linear amplitudes.\n[1] - amp->db - converts from linear amplitudes to decibels.\n[2] - midi->freq - converts from midi notes to frequencies.\n[3] - freq->midi - converts from frequencies to midi notes.\n[4] - semitones->ratios - converts semitone transpositions to ratios.\n[5] - ratios->semitones - converts from ratios to semitone transpositions.\n[6] - degrees->radians - converts from degress to radians.\n[7] - radians->degrees - converts from radians to degrees.\n\n(default: db->amp)"
        }
    },
    "fl.maxpos~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.trace~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the mode used for output:\n\nParameter Options:\n[0] - full - outputs the entire frame in full.\n[1] - first - output the first sample of the frame only.\n[2] - last - output the last sample of the frame only.\n[3] - specified - output the sample specified by index using the position parameter.\n[4] - ratio - output the sample specified by the position parameter as a ratio of the frame length.\n\n(default: full)"
        },
        "2": {
            "name": "/buffer_size [double]",
            "description": "INSTANTIATION ONLY\n\nSets the internal buffer size in the units specified by the units parameter.\n\n(default: 250000, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the time units used to determine the buffer size and delay.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "4": {
            "name": "/position [double]",
            "description": "Sets the position of the output sample in specified or ratio mode. Note that positions out of range will be clipped tp the input frame (to the first or last position).\n\n(default: 0, min: 0)"
        },
        "5": {
            "name": "/delay [double]",
            "description": "Sets the output delay in the units specified by the units parameter.\n\n(default: 0, min: 0)"
        }
    },
    "fl.atan2~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.perblock~": {
        "1": {
            "name": null,
            "description": "fl.perblock~ has no parameters."
        }
    },
    "fl.complex.pow~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes).\n\n(default: 0, size: 2)"
        }
    },
    "fl.complex.log~": {
        "1": {
            "name": null,
            "description": "fl.complex.log~ has no parameters."
        }
    },
    "fl.nonzero~": {
        "1": {
            "name": null,
            "description": "fl.nonzero~ has no parameters."
        }
    },
    "fl.notequals~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.timedelta~": {
        "1": {
            "name": "/units [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        }
    },
    "fl.read~": {
        "1": {
            "name": "/buffer [string]",
            "description": "Sets the buffer to use."
        },
        "2": {
            "name": "/channel [int]",
            "description": "Sets the buffer channel to use.\n\n(default: 1, min: 1)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for interpreting the input. Note that the edge parameter is also accounted for normalised mode. This adjusts the scaling to work sensibly with cyclical modes.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n[3] - normalised\n\n(default: ms)"
        },
        "4": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none - no interpolation.\n[1] - linear - linear interpolation.\n[2] - hermite - cubic hermite interpolation.\n[3] - bspline - cubic bspline interpolation.\n[4] - lagrange - cubic lagrange interpolation.\n\n(default: hermite)"
        },
        "5": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for both interpolation and reading:\n\nParameter Options:\n[0] - zero - values beyond the edges of the buffer are read as zeros.\n[1] - extend - the edge values are extended infinitely in either direction.\n[2] - wrap - values are read as wrapped or cyclical.\n[3] - fold - values are folded at edges without repetition of the edge values.\n[4] - mirror - values are mirrored at edges with the edge values repeated.\n[5] - extrapolate - values out of range are extrapolated via interpolation.\n\n(default: zero)"
        },
        "6": {
            "name": "/bound [bool]",
            "description": "Sets whether reading is bounded to the edges of the buffer, or can extend beyond it.\n\n(default: true)"
        }
    },
    "fl.stddev~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.streamid~": {
        "1": {
            "name": null,
            "description": "fl.streamid~ has no parameters."
        }
    },
    "fl.lessthaneq~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.once~": {
        "1": {
            "name": null,
            "description": "fl.once~ has no parameters."
        }
    },
    "fl.exp~": {
        "1": {
            "name": null,
            "description": "fl.exp~ has no parameters."
        }
    },
    "fl.audiotrigger~": {
        "1": {
            "name": null,
            "description": "fl.audiotrigger~ has no parameters."
        }
    },
    "fl.sin~": {
        "1": {
            "name": null,
            "description": "fl.sin~ has no parameters."
        }
    },
    "fl.poltocar~": {
        "1": {
            "name": "/dimensions [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the number of dimensions (and hence inputs and outputs).\n\nParameter Options:\n[0] - 2D\n[1] - 3D\n\n(default: 2D)"
        },
        "2": {
            "name": "/angles [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the units used for angles.\n\nParameter Options:\n[0] - radians\n[1] - degrees\n\n(default: radians)"
        }
    },
    "fl.lookupstring~": {
        "1": {
            "name": "/num_items [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of items.\n\n(default: 1, clipped: 1-32)"
        },
        "2": {
            "name": "/tag [string]",
            "description": "Sets the output tag."
        },
        "3": {
            "name": "/scale [enum]",
            "description": "Sets the input scale:\n\nParameter Options:\n[0] - indices - string lookup is done by index.\n[1] - normalised - string lookup is done by normalised value.\n\n(default: indices)"
        },
        "4": {
            "name": "/empty [enum]",
            "description": "Sets the behaviour when empty frames are received:\n\nParameter Options:\n[0] - ignore - empty frames are ignored.\n[1] - reset - empty frames create empty tags to reset parameters to defaults.\n\n(default: ignore)"
        },
        "5": {
            "name": "/item_01...32 [string]",
            "description": "Sets the string for item N [1-32]."
        }
    },
    "fl.flatness~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 1)"
        }
    },
    "fl.log2~": {
        "1": {
            "name": null,
            "description": "fl.log2~ has no parameters."
        }
    },
    "fl.max~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.asin~": {
        "1": {
            "name": null,
            "description": "fl.asin~ has no parameters."
        }
    },
    "fl.timemedian~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum number of frames for calculation. Note that the internal buffer is reset when this changes.\n\n(default: 10, min: 1)"
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current number of frames for calculation as an integer.\n\n(default: 10, min: 1)"
        },
        "3": {
            "name": "/percentile [double]",
            "description": "Sets the percentile to retrieve.\n\n(default: 50, clipped: 0-100)"
        },
        "4": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "5": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad - pad the calculation with default values to account for the missing frames.\n[1] - shorten - calculate on all frames received since the reset.\n\nNote that frames at the reset input set the frame used for padding. If the frame is too short or empty it is padded with the pad parameter.\n\n(default: pad)"
        }
    },
    "fl.correlate~": {
        "1": {
            "name": "/max_length [int]",
            "description": "INSTANTIATION ONLY\n\nSets the maximum processing length. The processing length is M + N - 1 where M and N are the lengths of the two inputs.\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/mode [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the type of input and output.\n\nParameter Options:\n[0] - real\n[1] - complex\n\n(default: real)"
        },
        "3": {
            "name": "/edges [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the edge behaviour of the correlation process. The basic operation is a linear one with output of the processing length. For modes other than linear the output length is reduced to the maximum of M and N. Excess from the linear operation is added back into the available length as specified:\n\nParameter Options:\n[0] - linear - the output is the full processing length with no further processing.\n[1] - circular - excess at the end is added back to the beginning of the output.\n[2] - wrap - as circular mode but rotated such that wrapping occurs equally at both ends.\n[3] - fold - as wrap but folding not wrapping at the edges (edge values are not repeated).\n[4] - mirror - as fold but with repeated edge values.\n\n(default: linear)"
        }
    },
    "fl.skewness~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.interval~": {
        "1": {
            "name": "/interval [double]",
            "description": "Sets the interval between frames in the units specified by the units parameter.\n\n(default: 64, min: 0)"
        },
        "2": {
            "name": "/units [enum]",
            "description": "Sets the time units used for setting the interval.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n[3] - hz\n\n(default: samples)"
        },
        "3": {
            "name": "/switchable [bool]",
            "description": "INSTANTIATION ONLY\n\nSets whether the object is switchable or not (setting this on can reduce CPU efficiency).\n\n(default: false)"
        },
        "4": {
            "name": "/on [bool]",
            "description": "Sets the state when in switchable mode in order to start and stop the timing of intervals.\n\n(default: true)"
        }
    },
    "fl.acos~": {
        "1": {
            "name": null,
            "description": "fl.acos~ has no parameters."
        }
    },
    "fl.cos~": {
        "1": {
            "name": null,
            "description": "fl.cos~ has no parameters."
        }
    },
    "fl.sinh~": {
        "1": {
            "name": null,
            "description": "fl.sinh~ has no parameters."
        }
    },
    "fl.floor~": {
        "1": {
            "name": null,
            "description": "fl.floor~ has no parameters."
        }
    },
    "fl.kernelsmooth~": {
        "1": {
            "name": "/smooth [variable length double array]",
            "description": "Sets the width of smoothing as interpreted by the scale parameter. If only one value is provided it sets the smoothing width directly. If two values are provided they set the smoothing amounts at either edge. The smoothing width is then interpolated per sample across the output.\n\n(default: 0, min: 0, max size: 2)"
        },
        "2": {
            "name": "/scale [enum]",
            "description": "Sets the scaling for the smoothing parameter:\n\nParameter Options:\n[0] - samples - smoothing is specified in samples.\n[1] - normalised - smoothing is specified in relation to the width of the input [0-1].\n\n(default: samples)"
        },
        "3": {
            "name": "/symmetric [bool]",
            "description": "Indicates that the kernel is symmetric with only the right-hand side provided.\n\n(default: true)"
        },
        "4": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for smoothing:\n\nParameter Options:\n[0] - zero - values beyond the edges of the input are read as zeros.\n[1] - extend - the edge values are extended infinitely in either direction.\n[2] - wrap - values are read as wrapped or cyclical.\n[3] - fold - values are folded at edges without repetition of the edge values.\n[4] - mirror - values are mirrored at edges with the edge values repeated.\n\n(default: zero)"
        },
        "5": {
            "name": "/max_fft [int]",
            "description": "INSTANTIATION ONLY\n\nSets the maximum FFT size available for internal processing. Note that this needs to be large enough to contain the input, kernel and edges.\n\n(default: 32768)"
        }
    },
    "fl.join~": {
        "1": {
            "name": "/num_ins [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs.\n\n(default: 2, clipped: 2-32)"
        },
        "2": {
            "name": "/trigger_ins [variable length bool array]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output using an array of bools. By default all inputs trigger output.\n\n(default: true, max size: 32)"
        }
    },
    "fl.uniform~": {
        "1": {
            "name": "/value [double]",
            "description": "Sets the value to output.\n\n(default: 0)"
        },
        "2": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested - the output length is set by the length parameter.\n[1] - input - the output length follows the length of the trigger input.\n\n(default: requested)"
        },
        "3": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter.\n\n(default: 1, min: 0)"
        },
        "4": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        }
    },
    "fl.length~": {
        "1": {
            "name": null,
            "description": "fl.length~ has no parameters."
        }
    },
    "fl.trunc~": {
        "1": {
            "name": null,
            "description": "fl.trunc~ has no parameters."
        }
    },
    "fl.store~": {
        "1": {
            "name": "/name [string]",
            "description": "INSTANTIATION ONLY\n\nSets the name of the storage to use. Note that names are local to the current context."
        }
    },
    "fl.log10~": {
        "1": {
            "name": null,
            "description": "fl.log10~ has no parameters."
        }
    },
    "fl.framedelta~": {
        "1": {
            "name": null,
            "description": "fl.framedelta~ has no parameters."
        }
    },
    "fl.spatial~": {
        "1": {
            "name": "/angles [enum]",
            "description": "Sets the units used for angles.\n\nParameter Options:\n[0] - radians\n[1] - degrees\n\n(default: degrees)"
        },
        "2": {
            "name": "/input_coords [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the coordinate system used for input.\n\nParameter Options:\n[0] - polar\n[1] - cartesian\n\n(default: polar)"
        },
        "3": {
            "name": "/speaker_coords [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the coordinate system used for speaker positions.\n\nParameter Options:\n[0] - polar\n[1] - cartesian\n\n(default: polar)"
        },
        "4": {
            "name": "/constrain [enum]",
            "description": "Sets the method for constraining positions outside of the speaker array:\n\nParameter Options:\n[0] - none - suitable when the input is already within the speaker array (most efficient).\n[1] - hemisphere - restrict to the upper hemisphere of the sphere described below.\n[2] - sphere - restrict to the smallest sphere centred at the origin containing all speakers.\n[3] - hull - restrict to the convex hull of the speaker array (least efficient / always correct.\n\n(default: hull)"
        },
        "5": {
            "name": "/speakers [variable length double array]",
            "description": "INSTANTIATION ONLY\n\nSets the speaker positions in triples (one triple per speaker). For cartesian coordinates the values are [x, z, y]. For polar coordinates the values are [radius, azimuth, elevation].\n\n(default: 0, max size: 360)"
        },
        "6": {
            "name": "/weights [variable length double array]",
            "description": "Sets the speaker weightings (one value per speaker). By default all speakers are weighted equally. Using weighting values allows the emphasis or exclusion of specific speakers.\n\n(default: 1, min: 0, max size: 360)"
        },
        "7": {
            "name": "/rolloff [double]",
            "description": "Sets the rolloff in positive dB for a doubling of distance between source and speakers. The default (6dB) equates to the inverse distance law for sound propagating in a free field. Lower values may be suitable for simulating more closed environments.\n\n(default: 6, min: 1e-07)"
        },
        "8": {
            "name": "/blur [double]",
            "description": "Sets the blur factor. This should be set in relation to the dimensions of the speaker array. Larger numbers result in more blurring of the spatial image.\n\n(default: 0.001, min: 1e-07)"
        },
        "9": {
            "name": "/max_speakers [int]",
            "description": "Sets the number of speakers that can be non-zero (only the nearest N speakers are used). If this is set to zero then all speakers are used. Reducing the number of speakers used can improve localisation.\n\n(default: 0, min: 0)"
        },
        "10": {
            "name": "/point_factor [double]",
            "description": "Interpolation factor between DBAP (at 0) and point source panning (at 1).\n\n(default: 0, clipped: 0-1)"
        }
    },
    "fl.constant~": {
        "1": {
            "name": "/constant [enum]",
            "description": "Sets the constant to output.\n\nParameter Options:\n[0] - pi\n[1] - 1/pi\n[2] - e\n[3] - 1/e\n[4] - sqrt2\n[5] - 1/sqrt2\n[6] - epsilon\n\n(default: pi)"
        },
        "2": {
            "name": "/multiplier [double]",
            "description": "Sets the multiplier.\n\n(default: 1)"
        }
    },
    "fl.atanh~": {
        "1": {
            "name": null,
            "description": "fl.atanh~ has no parameters."
        }
    },
    "fl.mean~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.biquad~": {
        "1": {
            "name": "/a1 [double]",
            "description": "Sets the a1 coefficient.\n\n(default: 0)"
        },
        "2": {
            "name": "/a2 [double]",
            "description": "Sets the a2 coefficient.\n\n(default: 0)"
        },
        "3": {
            "name": "/b0 [double]",
            "description": "Sets the b0 coefficient.\n\n(default: 0)"
        },
        "4": {
            "name": "/b1 [double]",
            "description": "Sets the b1 coefficient.\n\n(default: 0)"
        },
        "5": {
            "name": "/b2 [double]",
            "description": "Sets the b2 coefficient.\n\n(default: 0)"
        },
        "6": {
            "name": "/dynamic [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates inputs for per sample values for each of the filter parameters. If an input is not provided the corresponding parameter value is used.\n\n(default: false)"
        },
        "7": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame.\n\n(default: true)"
        }
    },
    "fl.lag~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum lag value in frames. Note that the internal buffer is reset when this changes.\n\n(default: 10, min: 1)"
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current lag as an integer.\n\n(default: 1, min: 0)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "4": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad - output a frame of default values.\n[1] - shorten - output the oldest input frame since the reset.\n\nNote that frames at the reset input set the frame used for padding. If the frame is too short or empty it is padded with the pad parameter.\n\n(default: pad)"
        }
    },
    "fl.complex.cosh~": {
        "1": {
            "name": null,
            "description": "fl.complex.cosh~ has no parameters."
        }
    },
    "fl.plus~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.sqrt~": {
        "1": {
            "name": null,
            "description": "fl.sqrt~ has no parameters."
        }
    },
    "fl.timer~": {
        "1": {
            "name": "/units [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        }
    },
    "fl.framemax~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: -inf)"
        }
    },
    "fl.rms~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.frommax~": {
        "1": {
            "name": "/mode [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode:\n\nParameter Options:\n[0] - values - translate values from the host into vectors.\n[1] - params - translate host messages into concatenated tagged frames.\n\n(default: values)"
        }
    },
    "fl.random~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested - the output length is set by the length parameter.\n[1] - input - the output length follows the length of the trigger input.\n\n(default: requested)"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter.\n\n(default: 1, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        }
    },
    "fl.complex.expr~": {
        "1": {
            "name": "/expression [string]",
            "description": "INSTANTIATION ONLY\n\nSets the mathematical expression. Input pairs are indicated in1 to inx (where x is the number of input pairs created). Complex numbers can be expressed directly in the form (a + bi). A range of other constants, operators and functions are available:\n\nConstants { i e pi epsilon inf }.\nUnary Operators { - }.\nBinary Operators { / * % + }.\nTrigonometric Functions { sin cos tan asin acos atan }.\nHyperbolic Functions { sinh cosh tanh asinh acosh atanh }.\nUnary Functions { log log10 exp conj sqrt }.\nBinary Functions { pow }."
        },
        "2": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - smaller input pairs are read modulo against the longest input pair.\n[1] - shrink - the output length is set to that of the shortest input pair.\n[2] - extend - if required input pairs are extended by repeating their final value.\n\n(default: wrap)"
        },
        "3": {
            "name": "/trigger_ins [variable length bool array]",
            "description": "INSTANTIATION ONLY\n\nSets which input pairs trigger output using an array of bools. By default all inputs trigger output.\n\n(default: true, max size: 32)"
        }
    },
    "fl.pack~": {
        "1": {
            "name": "/num_ins [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs.\n\n(default: 2)"
        }
    },
    "fl.dispatch~": {
        "1": {
            "name": "/num_ins [double]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs.\n\n(default: 2, clipped: 2-32)"
        },
        "2": {
            "name": "/num_outs [double]",
            "description": "INSTANTIATION ONLY\n\nSets the number of outputs.\n\n(default: 2, clipped: 2-32)"
        },
        "3": {
            "name": "/input_01...32 [int]",
            "description": "Sets the current input for output N [1-32] counting from 1 (off if out of range).\n\n(default: 0)"
        }
    },
    "fl.biquadcoeff~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter frequency.\n\n(default: 0, min: 0)"
        },
        "2": {
            "name": "/gain [double]",
            "description": "Sets the linear gain of the filter.\n\n(default: 1, min: 0)"
        },
        "3": {
            "name": "/qs [double]",
            "description": "Sets the q or s of the filter.\n\n(default: 0, min: 0)"
        },
        "4": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode:\n\nParameter Options:\n[0] - lowpass - low pass.\n[1] - bandpass - band pass.\n[2] - highpass - high pass.\n[3] - peaknotch - peak notch.\n[4] - resonant - resonant.\n[5] - notch - band reject.\n[6] - lowshelf - low shelf.\n[7] - highshelf - high shelf.\n\n(default: lowpass)"
        },
        "5": {
            "name": "/coefficients [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the coefficients input and output modes:\n\nParameter Options:\n[0] - static - settings are made via parameters with single value outputs.\n[1] - dynamic - settings are made via inputs or parameters with output as vectors.\n[2] - tagged - settings are made via parameters with output as a tagged frame.\n\n(default: static)"
        }
    },
    "fl.source~": {
        "1": {
            "name": "/buffer_size [double]",
            "description": "INSTANTIATION ONLY\n\nSets the internal buffer size in the units specified by the units parameter.\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the length of output frames in the units specified by the units parameter.\n\n(default: 4096, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the time units used to determine the buffer size and output length.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "4": {
            "name": "/delay [double]",
            "description": "Sets the input delay in the units specified by the units parameter. Note that a minimum delay (or latency) is applied of the output length.\n\n(default: 0, min: 0)"
        },
        "5": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none - no interpolation.\n[1] - linear - linear interpolation.\n[2] - hermite - cubic hermite interpolation.\n[3] - bspline - cubic bspline interpolation.\n[4] - lagrange - cubic lagrange interpolation.\n\n(default: none)"
        }
    },
    "fl.modulo~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.pad~": {
        "1": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "2": {
            "name": "/start [double]",
            "description": "Sets the amount of padding to apply to the start of the frame.\n\n(default: 0, min: 0)"
        },
        "3": {
            "name": "/end [double]",
            "description": "Sets the amount of padding to apply to the end of the frame.\n\n(default: 0, min: 0)"
        },
        "4": {
            "name": "/units [enum]",
            "description": "Sets the units for padding amounts (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios\n\n(default: samples)"
        }
    },
    "fl.route~": {
        "1": {
            "name": "/num_outs [double]",
            "description": "INSTANTIATION ONLY\n\nSets the number of outputs.\n\n(default: 2, clipped: 2-32)"
        },
        "2": {
            "name": "/output [int]",
            "description": "Sets the current output counting from 1 (off if out of range).\n\n(default: 0)"
        }
    },
    "fl.fold~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - smaller right inputs are read modulo against larger left input.\n[1] - shrink - the output length is set to the length of the smaller input.\n[2] - extend - smaller right inputs are extended by repeating their final value.\n\n(default: wrap)"
        }
    },
    "fl.lessthan~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.complex.log10~": {
        "1": {
            "name": null,
            "description": "fl.complex.log10~ has no parameters."
        }
    },
    "fl.reverse~": {
        "1": {
            "name": null,
            "description": "fl.reverse~ has no parameters."
        }
    },
    "fl.complex.tanh~": {
        "1": {
            "name": null,
            "description": "fl.complex.tanh~ has no parameters."
        }
    },
    "fl.complex.tan~": {
        "1": {
            "name": null,
            "description": "fl.complex.tan~ has no parameters."
        }
    },
    "fl.timemean~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum number of frames for calculation. Note that the internal buffer is reset when this changes.\n\n(default: 10, min: 1)"
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current number of frames for calculation as an integer.\n\n(default: 10, min: 1)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "4": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad - pad the calculation with default values to account for the missing frames.\n[1] - shorten - calculate on all frames received since the reset.\n\nNote that frames at the reset input set the frame used for padding. If the frame is too short or empty it is padded with the pad parameter.\n\n(default: pad)"
        }
    },
    "fl.now~": {
        "1": {
            "name": "/units [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        }
    },
    "fl.pattern~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the mode:\n\nParameter Options:\n[0] - run - the pattern progresses until it hits the final value.\n[1] - loop - the pattern loops.\n[2] - pause - the pattern is paused until the mode is changed.\n[3] - stop - the pattern returns to the reset position until the mode is changed.\n\n(default: run)"
        },
        "2": {
            "name": "/direction [enum]",
            "description": "Sets the direction of progress.\n\nParameter Options:\n[0] - forward\n[1] - backward\n\n(default: forward)"
        },
        "3": {
            "name": "/reset [int]",
            "description": "Sets the reset position as a sample index. A value of -1 can be used for direction independent reset. For forward direction reading this results in a reset to the first position. For backward direction reading this results in a reset to the last position.\n\n(default: -1, min: -1)"
        },
        "4": {
            "name": "/idle [enum]",
            "description": "Sets the idle output (the output when stopped, paused or out of bounds):\n\nParameter Options:\n[0] - repeat - repeat the current value.\n[1] - empty - output an empty frame.\n\n(default: repeat)"
        }
    },
    "fl.diff~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.gaussian~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested - the output length is set by the length parameter.\n[1] - input - the output length follows the length of the trigger input.\n\n(default: requested)"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter.\n\n(default: 1, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "4": {
            "name": "/mean [double]",
            "description": "Sets the default mean.\n\n(default: 0)"
        },
        "5": {
            "name": "/deviation [double]",
            "description": "Sets the default standard deviation.\n\n(default: 1)"
        },
        "6": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatches between input and output lengths:\n\nParameter Options:\n[0] - default - missing input values are substitued using the default values.\n[1] - extend - inputs are extended by repeating their final value.\n\nNote that default values are always used when an input is empty.\n\n(default: default)"
        }
    },
    "fl.complex.conj~": {
        "1": {
            "name": null,
            "description": "fl.complex.conj~ has no parameters."
        }
    },
    "fl.acosh~": {
        "1": {
            "name": null,
            "description": "fl.acosh~ has no parameters."
        }
    },
    "fl.map~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the type of output scaling:\n\nParameter Options:\n[0] - linear - linear scaling.\n[1] - log - logarithmic scaling.\n[2] - exp - exponential scaling.\n[3] - pow - input range scaled [0-1], raised to an exponent and then scaled to the output range.\n[4] - db - output range set in dB with mapping to corresponding linear gain values.\n[5] - transpose - output range set in semitones with mapping to corresponding ratios.\n[6] - inverse_pow - the inverse mapping of the pow mode.\n[7] - inverse_db - the inverse mapping of the db mode.\n[8] - inverse_transpose - the inverse mapping of the inverse_transpose mode.\n\n(default: linear)"
        },
        "2": {
            "name": "/in_1 [double]",
            "description": "Sets the first bound of the input range.\n\n(default: 0)"
        },
        "3": {
            "name": "/in_2 [double]",
            "description": "Sets the second bound of the input range.\n\n(default: 1)"
        },
        "4": {
            "name": "/out_1 [double]",
            "description": "Sets the first bound of the output range.\n\n(default: 0)"
        },
        "5": {
            "name": "/out_2 [double]",
            "description": "Sets the second bound of the output range.\n\n(default: 1)"
        },
        "6": {
            "name": "/clip [bool]",
            "description": "If set on then the output is constrained between the two output values. Note that scaling will otherwise continue outside of the specified ranges.\n\n(default: true)"
        },
        "7": {
            "name": "/exponent [double]",
            "description": "Sets the exponent for the pow and inverse_pow modes.\n\n(default: 1)"
        }
    },
    "fl.makewindow~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested - the output length is set by the length parameter.\n[1] - input - the output length follows the length of the trigger input.\n\n(default: requested)"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter.\n\n(default: 512, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "4": {
            "name": "/window [enum]",
            "description": "Sets the window type:\n\nParameter Options:\n[0] - rectangle - a window of equal values.\n[1] - triangle - a triangular window.\n[2] - trapezoid - an adjustable trapezoid window.\n[3] - welch - the Welch polynomial window.\n[4] - parzen - the Parzen polynomial window.\n[5] - tukey - the adjustable Tukey (or cosine-tapered) window.\n[6] - sine - the sine (or cosine) window.\n[7] - hann - the Hann window.\n[8] - hamming - the Hamming window (a0=0.54, a1=0.46).\n[9] - blackman - the Blackman window (a0=0.42, a1=0.50, a2 = 0.08).\n[10] - exact_blackman - the Blackman window (a0=7938/18608, a1=9240/18608, a2=1430/18608).\n[11] - blackman_harris - the Blackman-Harris window with 92dB rejection.\n[12] - nuttall_continuous - Nuttall's continuous 1st derivative window with 93dB rejection.\n[13] - nuttall_minimal - Nuttall's minimal sidelobe window with 98dB rejection.\n[14] - flat_top - Heinzel's flat-top window with 95dB rejection.\n[15] - cosine_sum - a sum of cosines as set by the parameters.\n[16] - kaiser - a kaiser window adjustable via the beta parameter.\n[17] - sine_taper - one of the sine tapers selectable by parameter.\n\n(default: hann)"
        },
        "5": {
            "name": "/exponent [double]",
            "description": "Sets an exponent that each value in the window should be raised to.\n\n(default: 1)"
        },
        "6": {
            "name": "/compensate [enum]",
            "description": "Sets the gain compensation (the window is divided by the compensated gain). For FFT input windowing linear compensatation is recommended. For output windowing reconstruct correctly compensates for a matched input window:\n\nParameter Options:\n[0] - off - no compensation is used.\n[1] - linear - compensate the linear gain of the window.\n[2] - square - compensate the gain of the window when applied twice (squared).\n[3] - reconstruct - compensate the gain of the squared window divided by the linear gain.\n\nNote that the gain of the window is calculated after applying any exponent.\n\n(default: off)"
        },
        "7": {
            "name": "/parameters [variable length double array]",
            "description": "An array that sets parameters specific to the window type:\n\ntrapezoid - takes either one or two parameter as percentages. If one parameter is provided it sets the first high point which is then mirrored. If two parameters are provided they set the two points of the trapezoid. The defaults are 25% and 75%.\n\ntukey - takes a single parameter to set the cosine percentage (defaults to 50%). When set to 100% the window is the same as the Hann window. Reducing the percentage increases the central plateau.\n\ncosine_sum - takes up to 5 parameters [a0-a4] as in the following formula. The defaults are set to the values for a Hann window:\n\n    w(x) = a0 - a1 * cos(2\u03c0x) + a2 * cos(4\u03c0x) - a3 * cos(6\u03c0x) + a4 * cos(8\u03c0x)\n\nkaiser - takes a single parameter to set the beta parameter. The default value is  6.24.\n\nsine_taper - takes a single integer parameter to select the taper. The default sine taper is 1 which is equivalent to the sine window.\n\nNote that other window types do not take any parameters.\n\n(default: 0, max size: 5)"
        },
        "8": {
            "name": "/endpoints [enum]",
            "description": "Sets which endpoints of the window will be generated. For spectral applications a periodic window (first or last) is preferable. For granular or filter usage a symmetric window (both or none) is preferable.\n\nParameter Options:\n[0] - both\n[1] - first\n[2] - last\n[3] - none\n\n(default: first)"
        }
    },
    "fl.select~": {
        "1": {
            "name": "/num_ins [double]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs.\n\n(default: 2, clipped: 2-32)"
        },
        "2": {
            "name": "/input [int]",
            "description": "Sets the current input counting from 1 (or off if out of range).\n\n(default: 0)"
        }
    },
    "fl.tan~": {
        "1": {
            "name": null,
            "description": "fl.tan~ has no parameters."
        }
    },
    "fl.sum~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.equals~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.not~": {
        "1": {
            "name": null,
            "description": "fl.!~ has no parameters."
        }
    },
    "fl.atan~": {
        "1": {
            "name": null,
            "description": "fl.atan~ has no parameters."
        }
    },
    "fl.clip~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - smaller right inputs are read modulo against larger left input.\n[1] - shrink - the output length is set to the length of the smaller input.\n[2] - extend - smaller right inputs are extended by repeating their final value.\n\n(default: wrap)"
        }
    },
    "fl.tanh~": {
        "1": {
            "name": null,
            "description": "fl.tanh~ has no parameters."
        }
    },
    "fl.nanfilter~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets whether NaNs are replaced or removed.\n\nParameter Options:\n[0] - replace\n[1] - remove\n\n(default: replace)"
        },
        "2": {
            "name": "/value [double]",
            "description": "Sets the value with which to replace NaNs when in replace mode.\n\n(default: 0)"
        }
    },
    "fl.ramp~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested - the output length is set by the length parameter.\n[1] - input - the output length follows the length of the trigger input.\n\n(default: requested)"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter.\n\n(default: 1, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "4": {
            "name": "/scale [enum]",
            "description": "Sets the scaling of the output ramp:\n\nParameter Options:\n[0] - count - scaled in samples (an interger count from zero).\n[1] - ms - scaled in milliseconds starting at zero.\n[2] - seconds - scaled in seconds starting at zero.\n[3] - normalised - output is normalised according to the edges parameter.\n\n(default: count)"
        },
        "5": {
            "name": "/endpoints [enum]",
            "description": "Sets the included edges when the scale parameter is set to normalised:\n\nParameter Options:\n[0] - both - the ramp is scaled [0-1].\n[1] - first - the ramp is scaled [0-1).\n[2] - last - the ramp is scaled (0-1].\n[3] - none - the ramp is scaled (0-1).\n\n(default: both)"
        }
    },
    "fl.tag~": {
        "1": {
            "name": "/num_ins [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs (and hence the number of tags).\n\n(default: 1, clipped: 1-10)"
        },
        "2": {
            "name": "/empty [enum]",
            "description": "Sets the behaviour when empty frames are received:\n\nParameter Options:\n[0] - ignore - empty frames are ignored.\n[1] - reset - empty frames create empty tags to reset parameters to defaults.\n\n(default: ignore)"
        },
        "3": {
            "name": "/tag_01...10 [string]",
            "description": "Sets the tag for input N [1-10]."
        }
    },
    "fl.timestddev~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum number of frames for calculation. Note that the internal buffer is reset when this changes.\n\n(default: 10, min: 1)"
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current number of frames for calculation as an integer.\n\n(default: 10, min: 1)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "4": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad - pad the calculation with default values to account for the missing frames.\n[1] - shorten - calculate on all frames received since the reset.\n\nNote that frames at the reset input set the frame used for padding. If the frame is too short or empty it is padded with the pad parameter.\n\n(default: pad)"
        }
    },
    "fl.fft~": {
        "1": {
            "name": "/max_length [int]",
            "description": "INSTANTIATION ONLY\n\nSets the maximum input length and FFT size.\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/normalise [bool]",
            "description": "INSTANTIATION ONLY\n\nSets normalisation on or off (such that a full-scale real sine wave produces an amplitude of 1).\n\n(default: true)"
        },
        "3": {
            "name": "/mode [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the type of input expected and the output produced:\n\nParameter Options:\n[0] - real - real input (power of two length) and output without reflection (length is N / 2 + 1).\n[1] - complex - complex input (two frames) with the same (power of two) input and output lengths.\n[2] - full_spectrum - real input and output of the same (power of two) length with spectral reflection.\n\n(default: real)"
        }
    },
    "fl.geomean~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.ifft~": {
        "1": {
            "name": "/max_length [int]",
            "description": "INSTANTIATION ONLY\n\nSets the maximum output length and FFT size.\n\n(default: 16384, min: 0)"
        },
        "2": {
            "name": "/normalise [bool]",
            "description": "INSTANTIATION ONLY\n\nSets normalisation on or off (such that a full-scale real sine wave has an amplitude of 1).\n\n(default: true)"
        },
        "3": {
            "name": "/mode [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the type of output produced and the input expected:\n\nParameter Options:\n[0] - real - real output (power of two length) for input without reflection (length is N / 2 + 1).\n[1] - complex - complex output (two frames) with the same (power of two) input and output lengths.\n[2] - full_spectrum - real output for input of the same (power of two) length input.\n\nNote that in full_spectrum mode correct spectral reflection is expected and thus ignored.\n\n(default: real)"
        }
    },
    "fl.erfc~": {
        "1": {
            "name": null,
            "description": "fl.erfc~ has no parameters."
        }
    },
    "fl.split~": {
        "1": {
            "name": "/split [double]",
            "description": "Sets the split point.\n\n(default: 0, min: 0)"
        },
        "2": {
            "name": "/units [enum]",
            "description": "Sets the units for the split point (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios\n\n(default: samples)"
        }
    },
    "fl.movingaverage~": {
        "1": {
            "name": "/alpha_up [double]",
            "description": "Sets the alpha value when the average is increasing. This value is only used if a sufficiently long alpha frame is not present.\n\n(default: 0.5, clipped: 0-1)"
        },
        "2": {
            "name": "/alpha_down [double]",
            "description": "Sets the alpha value when the average is increasing. This value is only used if a sufficiently long alpha frame is not present.\n\n(default: 0.5, clipped: 0-1)"
        },
        "3": {
            "name": "/average [double]",
            "description": "Sets the padding value for averages. This value is only used if a sufficiently long average reset frame is not present.\n\n(default: 0)"
        },
        "4": {
            "name": "/deviation [double]",
            "description": "Sets the padding value for deviations. This value is only used if a sufficiently long deviation reset frame is not present.\n\n(default: 0)"
        }
    },
    "fl.complex.divide~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes).\n\n(default: 0, size: 2)"
        }
    },
    "fl.abs~": {
        "1": {
            "name": null,
            "description": "fl.abs~ has no parameters."
        }
    },
    "fl.svf~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter cutoff frequency.\n\n(default: 500, min: 0)"
        },
        "2": {
            "name": "/res [double]",
            "description": "Sets the filter resonance.\n\n(default: 0, clipped: 0-1)"
        },
        "3": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode when multi-output mode is off:\n\nParameter Options:\n[0] - lowpass - low pass.\n[1] - bandpass - band pass.\n[2] - highpass - high pass.\n\n(default: lowpass)"
        },
        "4": {
            "name": "/multi_output [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates an output per filter mode with all modes output simultaneously.\n\n(default: false)"
        },
        "5": {
            "name": "/dynamic [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates inputs for per sample values for each of the filter parameters. If an input is not provided the corresponding parameter value is used.\n\n(default: false)"
        },
        "6": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame.\n\n(default: true)"
        }
    },
    "fl.subframe~": {
        "1": {
            "name": "/start [double]",
            "description": "Sets the start point of the subframe.\n\n(default: 0, min: 0)"
        },
        "2": {
            "name": "/end [double]",
            "description": "Sets the end point of the subframe.\n\n(default: 0, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units for the start and end points (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios\n\n(default: samples)"
        }
    },
    "fl.minpos~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.hypot~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.onepole~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter cutoff frequency.\n\n(default: 500, min: 0)"
        },
        "2": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode when multi-output mode is off:\n\nParameter Options:\n[0] - lowpass - low pass.\n[1] - highpass - high pass.\n\n(default: lowpass)"
        },
        "3": {
            "name": "/multi_output [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates an output per filter mode with all modes output simultaneously.\n\n(default: false)"
        },
        "4": {
            "name": "/dynamic [bool]",
            "description": "INSTANTIATION ONLY\n\nCreates inputs for per sample values for each of the filter parameters. If an input is not provided the corresponding parameter value is used.\n\n(default: false)"
        },
        "5": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame.\n\n(default: true)"
        }
    },
    "fl.untag~": {
        "1": {
            "name": "/num_outs [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of outputs (and hence the number of tags).\n\n(default: 1, clipped: 1-10)"
        },
        "2": {
            "name": "/tag_01...10 [string]",
            "description": "Sets the tag related to output N [1-10]."
        }
    },
    "fl.product~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 1)"
        }
    },
    "fl.crest~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 1)"
        }
    },
    "fl.chop~": {
        "1": {
            "name": "/num_outs [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of outputs.\n\n(default: 1, clipped: 2-32)"
        },
        "2": {
            "name": "/size [double]",
            "description": "Sets the size of the output frames.\n\n(default: 1, min: 0)"
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units for the size (samples or ratio of the input length [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios\n\n(default: samples)"
        }
    },
    "fl.register~": {
        "1": {
            "name": "/mode [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the behaviour of the right input:\n\nParameter Options:\n[0] - store - stores without output.\n[1] - pass - stores and outputs.\n\n(default: store)"
        }
    },
    "fl.min~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "INSTANTIATION ONLY\n\nSets the value used for padding (for either pad_in or pad_out modes).\n\n(default: 0)"
        }
    },
    "fl.round~": {
        "1": {
            "name": null,
            "description": "fl.round~ has no parameters."
        }
    },
    "fl.expr~": {
        "1": {
            "name": "/expression [string]",
            "description": "INSTANTIATION ONLY\n\nSets the mathematical expression. Inputs are indicated in1 to inx (where x is the number of input pairs created). A range of other constants, operators and functions are available:\n\nConstants { e pi epsilon inf }.\nUnary Operators { ! - }.\nBinary Operators { / * % + - > < >= <= == != && || }.\nTrigonometric Functions { sin cos tan asin acos atan }.\nHyperbolic Functions { sinh cosh tanh asinh acosh atanh }.\nUnary Functions { log log2 log10 exp exp2 abs ceil floor round trunc sqrt cbrt erf erfc }.\nBinary Functions { diff hypot max min pow }.\nTernary Functions { clip, wrap, fold }."
        },
        "2": {
            "name": "/mismatch [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - smaller inputs are read modulo against the longest input.\n[1] - shrink - the output length is set to that of the shortest input.\n[2] - extend - if required inputs are extended by repeating their final value.\n\n(default: wrap)"
        },
        "3": {
            "name": "/trigger_ins [variable length bool array]",
            "description": "INSTANTIATION ONLY\n\nSets which inputs trigger output using an array of bools. By default all inputs trigger output.\n\n(default: true, max size: 32)"
        }
    },
    "fl.peaks~": {
        "1": {
            "name": "/neighbours [int]",
            "description": "Sets the number of neighbours each side that must be exceeded in order to detect a peak.\n\n(default: 1, clipped: 1-4)"
        },
        "2": {
            "name": "/threshold [double]",
            "description": "Sets the threshold value for detecting a peak.\n\n(default: 0)"
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value.\n\n(default: 0)"
        },
        "4": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for peak detection:\n\nParameter Options:\n[0] - pad - values beyond the edges of the input are read as the padding value.\n[1] - extend - the edge values are extended infinitely in either direction.\n[2] - wrap - values are read as wrapped or cyclical.\n[3] - fold - values are folded at edges without repetition of the edge values.\n[4] - mirror - values are mirrored at edges with the edge values repeated.\n\n(default: pad)"
        },
        "5": {
            "name": "/refine [enum]",
            "description": "Sets the method for refining peak values:\n\nParameter Options:\n[0] - off - return the peak value without refinement.\n[1] - parabolic - apply parabolic interpolation to the three values around the peak.\n[2] - parabolic_log - apply parabolic interpolation to the log of the three values around the peak.\n\nNote that parabolic_log is suitable for interpolating linear amplitudes.\n\n(default: parabolic)"
        },
        "6": {
            "name": "/boundaries [enum]",
            "description": "Sets the method for selecting the boundaries between peaks:\n\nParameter Options:\n[0] - minimum - boundaries are set at the minimum value between consecutive peaks.\n[1] - midpoint - boundaries are set to the indices halfway between consecutive peaks.\n\n(default: minimum)"
        },
        "7": {
            "name": "/always_detect [bool]",
            "description": "If set on at least one peak will be detected even if no values match the peak criteria. If set off then the outputs will be empty if no peak is detected.\n\n(default: true)"
        }
    },
    "fl.cbrt~": {
        "1": {
            "name": null,
            "description": "fl.cbrt~ has no parameters."
        }
    },
    "fl.complex.plus~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap - the smaller input is read modulo against the larger input.\n[1] - shrink - the output length is set to that of the smaller input.\n[2] - pad_in - the smaller input is padded prior to calculation to match the larger input.\n[3] - pad_out - the output is padded to match the length of the larger input.\n\n(default: wrap)"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right\n\n(default: both)"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes).\n\n(default: 0, size: 2)"
        }
    },
    "fl.complex.sqrt~": {
        "1": {
            "name": null,
            "description": "fl.complex.sqrt~ has no parameters."
        }
    },
    "fl.ticks~": {
        "1": {
            "name": "/limit [int]",
            "description": "Sets the count limit.\n\n(default: 10, min: 0)"
        },
        "2": {
            "name": "/direction [enum]",
            "description": "Sets the direction of counting.\n\nParameter Options:\n[0] - up\n[1] - down\n\n(default: up)"
        },
        "3": {
            "name": "/reset [int]",
            "description": "Sets the reset value. A value of -1 can be used for direction independent reset. This results in reset to 0 when counting up and (limit - 1) when counting down.\n\n(default: -1, min: -1)"
        },
        "4": {
            "name": "/mode [enum]",
            "description": "Sets the mode:\n\nParameter Options:\n[0] - run - the count continues until it hits the limit or zero.\n[1] - loop - the count loops between zero and the limit minus one.\n[2] - pause - the count is paused until the mode is changed.\n[3] - stop - the count returns to the reset value until the mode is changed.\n\n(default: run)"
        },
        "5": {
            "name": "/idle [enum]",
            "description": "Sets the idle output (the output when stopped, paused or out of bounds):\n\nParameter Options:\n[0] - repeat - repeat the current count.\n[1] - empty - output an empty frame.\n\n(default: repeat)"
        }
    },
    "fl.cartopol~": {
        "1": {
            "name": "/dimensions [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the number of dimensions (and hence inputs and outputs).\n\nParameter Options:\n[0] - 2D\n[1] - 3D\n\n(default: 2D)"
        },
        "2": {
            "name": "/angles [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the units used for angles.\n\nParameter Options:\n[0] - radians\n[1] - degrees\n\n(default: radians)"
        }
    },
    "fl.prioritise~": {
        "1": {
            "name": "/num_ins [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs.\n\n(default: 2, clipped: 2-32)"
        },
        "2": {
            "name": "/order [enum]",
            "description": "INSTANTIATION ONLY\n\nSet whether to prioritise lower or higher numbered inputs.\n\nParameter Options:\n[0] - low\n[1] - high\n\n(default: low)"
        }
    },
    "fl.cosh~": {
        "1": {
            "name": null,
            "description": "fl.cosh~ has no parameters."
        }
    },
    "fl.spread~": {
        "1": {
            "name": "/empty [enum]",
            "description": "INSTANTIATION ONLY\n\nSets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty - output an empty frame.\n[1] - default - output the default value (see the default parameter).\n\n(default: empty)"
        },
        "2": {
            "name": "/default [double]",
            "description": "INSTANTIATION ONLY\n\nSets the default output value.\n\n(default: 0)"
        }
    },
    "fl.combinetags~": {
        "1": {
            "name": "/num_ins [int]",
            "description": "INSTANTIATION ONLY\n\nSets the number of inputs.\n\n(default: 2, clipped: 2-10)"
        }
    },
    "fl.ceil~": {
        "1": {
            "name": null,
            "description": "fl.ceil~ has no parameters."
        }
    },
    "fl.chain~": {
        "1": {
            "name": "/units [enum]",
            "description": "Sets the time units used at the input.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: samples)"
        },
        "2": {
            "name": "/time [enum]",
            "description": "Sets the way in which input values are interpreted:\n\nParameter Options:\n[0] - absolute - times are interpreted as absolute values since the start of time.\n[1] - relative - times are interpreted as relative to the current reference time.\n[2] - interval - times are interpreted as intervals (deltas) relative to the current reference time.\n\nNote that the reference time depends on the mode parameter.\n\n(default: interval)"
        },
        "3": {
            "name": "/mode [enum]",
            "description": "Sets the mode of operation:\n\nParameter Options:\n[0] - replace - cancel previously scheduled frames before scheduling those in the input frame.\n[1] - add - add new frames to those already scheduled (even if before those already scheduled).\n[2] - append - schedule new frames only after those currently scheduled have completed.\n\nNote that in replace and add modes the reference time is the time of the incoming frame. In append mode the reference time is that of the last currently scheduled frame. In append mode absolute times prior to the end of those already scheduled are ignored.\n\n(default: replace)"
        }
    },
    "fl.info~": {
        "1": {
            "name": "/buffer [string]",
            "description": "Sets the buffer to use."
        },
        "2": {
            "name": "/units [enum]",
            "description": "Sets the units for reporting the length of the buffer.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n\n(default: ms)"
        }
    },
    "fl.recall~": {
        "1": {
            "name": "/name [string]",
            "description": "INSTANTIATION ONLY\n\nSets the name of the storage to use. Note that names are local to the current context."
        }
    },
    "fl.window~": {
        "1": {
            "name": "/window [enum]",
            "description": "Sets the window type:\n\nParameter Options:\n[0] - rectangle - a window of equal values.\n[1] - triangle - a triangular window.\n[2] - trapezoid - an adjustable trapezoid window.\n[3] - welch - the Welch polynomial window.\n[4] - parzen - the Parzen polynomial window.\n[5] - tukey - the adjustable Tukey (or cosine-tapered) window.\n[6] - sine - the sine (or cosine) window.\n[7] - hann - the Hann window.\n[8] - hamming - the Hamming window (a0=0.54, a1=0.46).\n[9] - blackman - the Blackman window (a0=0.42, a1=0.50, a2 = 0.08).\n[10] - exact_blackman - the Blackman window (a0=7938/18608, a1=9240/18608, a2=1430/18608).\n[11] - blackman_harris - the Blackman-Harris window with 92dB rejection.\n[12] - nuttall_continuous - Nuttall's continuous 1st derivative window with 93dB rejection.\n[13] - nuttall_minimal - Nuttall's minimal sidelobe window with 98dB rejection.\n[14] - flat_top - Heinzel's flat-top window with 95dB rejection.\n[15] - cosine_sum - a sum of cosines as set by the parameters.\n[16] - kaiser - a kaiser window adjustable via the beta parameter.\n[17] - sine_taper - one of the sine tapers selectable by parameter.\n\n(default: hann)"
        },
        "2": {
            "name": "/size [double]",
            "description": "Sets the size of the internal window. If zero the window is matched to input length (best for frequency domain applications). Else the window is resampled by linear interpolation (best for granular applications).\n\n(default: 0, min: 0)"
        },
        "3": {
            "name": "/exponent [double]",
            "description": "Sets an exponent that each value in the window should be raised to.\n\n(default: 1)"
        },
        "4": {
            "name": "/compensate [enum]",
            "description": "Sets the gain compensation (the window is divided by the compensated gain). For FFT input windowing linear compensatation is recommended. For output windowing reconstruct correctly compensates for a matched input window:\n\nParameter Options:\n[0] - off - no compensation is used.\n[1] - linear - compensate the linear gain of the window.\n[2] - square - compensate the gain of the window when applied twice (squared).\n[3] - reconstruct - compensate the gain of the squared window divided by the linear gain.\n\nNote that the gain of the window is calculated after applying any exponent.\n\n(default: off)"
        },
        "5": {
            "name": "/parameters [variable length double array]",
            "description": "An array that sets parameters specific to the window type:\n\ntrapezoid - takes either one or two parameter as percentages. If one parameter is provided it sets the first high point which is then mirrored. If two parameters are provided they set the two points of the trapezoid. The defaults are 25% and 75%.\n\ntukey - takes a single parameter to set the cosine percentage (defaults to 50%). When set to 100% the window is the same as the Hann window. Reducing the percentage increases the central plateau.\n\ncosine_sum - takes up to 5 parameters [a0-a4] as in the following formula. The defaults are set to the values for a Hann window:\n\n    w(x) = a0 - a1 * cos(2\u03c0x) + a2 * cos(4\u03c0x) - a3 * cos(6\u03c0x) + a4 * cos(8\u03c0x)\n\nkaiser - takes a single parameter to set the beta parameter. The default value is  6.24.\n\nsine_taper - takes a single integer parameter to select the taper. The default sine taper is 1 which is equivalent to the sine window.\n\nNote that other window types do not take any parameters.\n\n(default: 0, max size: 5)"
        },
        "6": {
            "name": "/endpoints [enum]",
            "description": "Sets which endpoints of the window will be generated. For spectral applications a periodic window (first or last) is preferable. For granular or filter usage a symmetric window (both or none) is preferable.\n\nParameter Options:\n[0] - both\n[1] - first\n[2] - last\n[3] - none\n\n(default: first)"
        }
    },
    "fl.samplerate~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the type of conversion or value to output:\n\nParameter Options:\n[0] - rate - output the sample rate in Hz.\n[1] - nyquist - output the nyquist frequency in Hz.\n[2] - samples->ms - convert from samples to milliseconds.\n[3] - samples->seconds - convert from samples to seconds.\n[4] - ms->samples - convert from milliseconds to samples.\n[5] - seconds->samples - convert from seconds to samples.\n[6] - normalised->hz - convert from normalised frequency to frequency in Hz.\n[7] - hz->normalised - convert from frequency in Hz to normalised frequency.\n\n(default: rate)"
        },
        "2": {
            "name": "/normalisation [enum]",
            "description": "Sets the reference point for normalised frequency:\n\nParameter Options:\n[0] - full - [0 - 1] is equivalent to [0 - sample rate].\n[1] - nyquist - [0 - 1] is equivalent to [0 - nyquist].\n\n(default: full)"
        }
    }
}