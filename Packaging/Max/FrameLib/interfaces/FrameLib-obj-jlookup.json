{
    "fl.poltocar~": {
        "1": {
            "name": "/dimensions [instantiation enum]",
            "description": "Sets the number of dimensions (and hence inputs and outputs).\n\nParameter Options:\n[0] - 2D\n[1] - 3D"
        },
        "2": {
            "name": "/angles [instantiation enum]",
            "description": "Sets the units used for angles.\n\nParameter Options:\n[0] - radians\n[1] - degrees"
        }
    },
    "fl.spatial~": {
        "1": {
            "name": "/inputmode [enum]",
            "description": "Sets the input coordinate mode.\n\nParameter Options:\n[0] - polar\n[1] - cartesian"
        },
        "2": {
            "name": "/speakers [variable length double array]",
            "description": "Sets the speaker positions in polar triples (one triple per speaker)."
        },
        "3": {
            "name": "/weights [variable length double array]",
            "description": "Sets the speaker weightings (one value per speaker)."
        },
        "4": {
            "name": "/rolloff [double]",
            "description": "Sets the rolloff in dB."
        },
        "5": {
            "name": "/blur [double]",
            "description": "Sets the blur factor."
        },
        "6": {
            "name": "/maxspeakers [int]",
            "description": "Sets the maximum number of speakers to be used (the neaarest N speakers will be used only)."
        },
        "7": {
            "name": "/points [double]",
            "description": "Interpolate to point source panning (0 is modified DBAP - 1 is point source)."
        },
        "8": {
            "name": "/constrain [enum]",
            "description": "Sets the method for constraining positions outside of the speaker array.\n\nParameter Options:\n[0] - none\n[1] - hemisphere\n[2] - sphere\n[3] - hull"
        }
    },
    "fl.cartopol~": {
        "1": {
            "name": "/dimensions [instantiation enum]",
            "description": "Sets the number of dimensions (and hence inputs and outputs).\n\nParameter Options:\n[0] - 2D\n[1] - 3D"
        },
        "2": {
            "name": "/angles [instantiation enum]",
            "description": "Sets the units used for angles.\n\nParameter Options:\n[0] - radians\n[1] - degrees"
        }
    },
    "fl.unpack~": {
        "1": {
            "name": "/num_outs [instantiation int]",
            "description": "Sets the number of single stream outputs."
        }
    },
    "fl.streamid~": {
        "1": {
            "name": null,
            "description": "fl.streamid~ has no parameters."
        }
    },
    "fl.pack~": {
        "1": {
            "name": "/num_ins [instantiation int]",
            "description": "Sets the number of inputs."
        }
    },
    "fl.dispatch~": {
        "1": {
            "name": "/num_ins [instantiation double]",
            "description": "Sets the number of inputs."
        },
        "2": {
            "name": "/num_outs [instantiation double]",
            "description": "Sets the number of outputs."
        },
        "3": {
            "name": "/input_01...32 [int]",
            "description": "Sets the current input for output N [1-32] counting from 1 (off if out of range)."
        }
    },
    "fl.route~": {
        "1": {
            "name": "/num_outs [instantiation double]",
            "description": "Sets the number of outputs."
        },
        "2": {
            "name": "/output [int]",
            "description": "Sets the current output counting from 1 (off if out of range)."
        }
    },
    "fl.select~": {
        "1": {
            "name": "/num_ins [instantiation double]",
            "description": "Sets the number of inputs."
        },
        "2": {
            "name": "/input [int]",
            "description": "Sets the current input counting from 1 (or off if out of range)."
        }
    },
    "fl.timedelta~": {
        "1": {
            "name": "/units [instantiation enum]",
            "description": "Sets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.timer~": {
        "1": {
            "name": "/units [instantiation enum]",
            "description": "Sets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.now~": {
        "1": {
            "name": "/units [instantiation enum]",
            "description": "Sets the time units used for output.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.ticks~": {
        "1": {
            "name": "/limit [int]",
            "description": "Sets the count limit."
        },
        "2": {
            "name": "/direction [enum]",
            "description": "Sets the direction of counting.\n\nParameter Options:\n[0] - up\n[1] - down"
        },
        "3": {
            "name": "/reset [int]",
            "description": "Sets the reset value."
        },
        "4": {
            "name": "/mode [enum]",
            "description": "Sets the mode:\n\nParameter Options:\n[0] - run\n[1] - loop\n[2] - pause\n[3] - stop"
        },
        "5": {
            "name": "/idle [enum]",
            "description": "Sets the idle output (the output when stopped, paused or out of bounds):\n\nParameter Options:\n[0] - repeat\n[1] - empty"
        }
    },
    "fl.sort~": {
        "1": {
            "name": "/order [enum]",
            "description": "Sets the ordering of the sorted output.\n\nParameter Options:\n[0] - up\n[1] - down"
        },
        "2": {
            "name": "/indices [bool]",
            "description": "Performs the sort on the indices of the input rather than the values."
        }
    },
    "fl.shift~": {
        "1": {
            "name": "/shift [double]",
            "description": "Sets the shift amount (-ve for left shift / +ve for right shift)."
        },
        "2": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "3": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour:\n\nParameter Options:\n[0] - pad\n[1] - extend\n[2] - wrap\n[3] - fold\n[4] - mirror"
        },
        "4": {
            "name": "/units [enum]",
            "description": "Sets the units for the shift (samples or ratio of the input length [-1 to 1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.accumpos~": {
        "1": {
            "name": "/percentage [double]",
            "description": "Sets the percentage of the sum used for calculation [0-100]."
        },
        "2": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "3": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.framemin~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.centroid~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.medianfilter~": {
        "1": {
            "name": "/width [int]",
            "description": "Sets the width of the filtering in samples."
        },
        "2": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "3": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for filtering:\n\nParameter Options:\n[0] - pad\n[1] - extend\n[2] - wrap\n[3] - fold\n[4] - mirror"
        },
        "4": {
            "name": "/percentile [double]",
            "description": "Sets the percentile to return."
        }
    },
    "fl.percentile~": {
        "1": {
            "name": "/percentile [double]",
            "description": "Sets the percentile to calculate [0-100]."
        },
        "2": {
            "name": "/interpolate [bool]",
            "description": "Sets whether interpolation is used to estimate values between data points."
        },
        "3": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "4": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.kurtosis~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.maxpos~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.nonzero~": {
        "1": {
            "name": null,
            "description": "fl.nonzero~ has no parameters."
        }
    },
    "fl.stddev~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.flatness~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.skewness~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.kernelsmooth~": {
        "1": {
            "name": "/smooth [variable length double array]",
            "description": "Sets the width of smoothing as interpreted by the scale parameter."
        },
        "2": {
            "name": "/scale [enum]",
            "description": "Sets the scaling for the smoothing parameter:\n\nParameter Options:\n[0] - samples\n[1] - normalised"
        },
        "3": {
            "name": "/symmetric [bool]",
            "description": "Indicates that the kernel is symmetric with only the right-hand side provided."
        },
        "4": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for smoothing:\n\nParameter Options:\n[0] - zero\n[1] - extend\n[2] - wrap\n[3] - fold\n[4] - mirror"
        },
        "5": {
            "name": "/max_fft [instantiation int]",
            "description": "Sets the maximum FFT size available for internal processing."
        }
    },
    "fl.join~": {
        "1": {
            "name": "/num_ins [instantiation int]",
            "description": "Sets the number of inputs."
        },
        "2": {
            "name": "/trigger_ins [instantiation fixed length bool array]",
            "description": "Sets which inputs trigger output using an array of bools."
        }
    },
    "fl.length~": {
        "1": {
            "name": null,
            "description": "fl.length~ has no parameters."
        }
    },
    "fl.mean~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.framemax~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.rms~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.pad~": {
        "1": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "2": {
            "name": "/start [double]",
            "description": "Sets the amount of padding to apply to the start of the frame."
        },
        "3": {
            "name": "/end [double]",
            "description": "Sets the amount of padding to apply to the end of the frame."
        },
        "4": {
            "name": "/units [enum]",
            "description": "Sets the units for padding amounts (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.reverse~": {
        "1": {
            "name": null,
            "description": "fl.reverse~ has no parameters."
        }
    },
    "fl.pattern~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the mode:\n\nParameter Options:\n[0] - run\n[1] - loop\n[2] - pause\n[3] - stop"
        },
        "2": {
            "name": "/direction [enum]",
            "description": "Sets the direction of progress.\n\nParameter Options:\n[0] - forward\n[1] - backward"
        },
        "3": {
            "name": "/reset [int]",
            "description": "Sets the reset position as a sample index."
        },
        "4": {
            "name": "/idle [enum]",
            "description": "Sets the idle output (the output when stopped, paused or out of bounds):\n\nParameter Options:\n[0] - repeat\n[1] - empty"
        }
    },
    "fl.sum~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.nanfilter~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets whether NaNs are replaced or removed.\n\nParameter Options:\n[0] - replace\n[1] - remove"
        },
        "2": {
            "name": "/value [double]",
            "description": "Sets the value with which to replace NaNs when in replace mode."
        }
    },
    "fl.geomean~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.split~": {
        "1": {
            "name": "/split [double]",
            "description": "Sets the split point."
        },
        "2": {
            "name": "/units [enum]",
            "description": "Sets the units for the split point (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.subframe~": {
        "1": {
            "name": "/start [double]",
            "description": "Sets the start point of the subframe."
        },
        "2": {
            "name": "/end [double]",
            "description": "Sets the end point of the subframe."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units for the start and end points (samples or ratios [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.minpos~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.product~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.crest~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.chop~": {
        "1": {
            "name": "/num_outs [instantiation int]",
            "description": "Sets the number of outputs."
        },
        "2": {
            "name": "/size [double]",
            "description": "Sets the size of the output frames."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units for the size (samples or ratio of the input length [0-1]).\n\nParameter Options:\n[0] - samples\n[1] - ratios"
        }
    },
    "fl.peaks~": {
        "1": {
            "name": "/neighbours [int]",
            "description": "Sets the number of neighbours each side that must be exceeded in order to detect a peak."
        },
        "2": {
            "name": "/threshold [double]",
            "description": "Sets the threshold value for detecting a peak."
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "4": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for peak detection:\n\nParameter Options:\n[0] - pad\n[1] - extend\n[2] - wrap\n[3] - fold\n[4] - mirror"
        },
        "5": {
            "name": "/refine [enum]",
            "description": "Sets the method for refining peak values:\n\nParameter Options:\n[0] - off\n[1] - parabolic\n[2] - parabolic_log"
        },
        "6": {
            "name": "/boundaries [enum]",
            "description": "Sets the method for selecting the boundaries between peaks:\n\nParameter Options:\n[0] - minimum\n[1] - midpoint"
        },
        "7": {
            "name": "/always_detect [bool]",
            "description": "If set on at least one peak will be detected even if no values match the peak criteria."
        }
    },
    "fl.prioritise~": {
        "1": {
            "name": "/num_ins [instantiation int]",
            "description": "Sets the number of inputs."
        },
        "2": {
            "name": "/order [instantiation enum]",
            "description": "Set whether to prioritise lower or higher numbered inputs.\n\nParameter Options:\n[0] - low\n[1] - high"
        }
    },
    "fl.spread~": {
        "1": {
            "name": "/empty [instantiation enum]",
            "description": "Sets the output to use when an empty input frame is received:\n\nParameter Options:\n[0] - empty\n[1] - default"
        },
        "2": {
            "name": "/default [instantiation double]",
            "description": "Sets the default output value."
        }
    },
    "fl.complex.minus~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complex.times~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complex.pow~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complex.divide~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.complex.plus~": {
        "1": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [enum]",
            "description": "Sets which pairs of inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [fixed length double array]",
            "description": "Sets the complex value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.read~": {
        "1": {
            "name": "/buffer [string]",
            "description": "Sets the buffer to use."
        },
        "2": {
            "name": "/channel [int]",
            "description": "Sets the buffer channel to use."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for interpreting the input.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n[3] - normalised"
        },
        "4": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none\n[1] - linear\n[2] - hermite\n[3] - bspline\n[4] - lagrange"
        },
        "5": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for both interpolation and reading:\n\nParameter Options:\n[0] - zero\n[1] - extend\n[2] - wrap\n[3] - fold\n[4] - mirror\n[5] - extrapolate"
        },
        "6": {
            "name": "/bound [bool]",
            "description": "Sets whether reading is bounded to the edges of the buffer, or can extend beyond it."
        }
    },
    "fl.info~": {
        "1": {
            "name": "/buffer [string]",
            "description": "Sets the buffer to use."
        },
        "2": {
            "name": "/units [enum]",
            "description": "Sets the units for reporting the length of the buffer.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.exp2~": {
        "1": {
            "name": null,
            "description": "fl.exp2~ has no parameters."
        }
    },
    "fl.asinh~": {
        "1": {
            "name": null,
            "description": "fl.asinh~ has no parameters."
        }
    },
    "fl.log~": {
        "1": {
            "name": null,
            "description": "fl.log~ has no parameters."
        }
    },
    "fl.erf~": {
        "1": {
            "name": null,
            "description": "fl.erf~ has no parameters."
        }
    },
    "fl.exp~": {
        "1": {
            "name": null,
            "description": "fl.exp~ has no parameters."
        }
    },
    "fl.sin~": {
        "1": {
            "name": null,
            "description": "fl.sin~ has no parameters."
        }
    },
    "fl.log2~": {
        "1": {
            "name": null,
            "description": "fl.log2~ has no parameters."
        }
    },
    "fl.asin~": {
        "1": {
            "name": null,
            "description": "fl.asin~ has no parameters."
        }
    },
    "fl.acos~": {
        "1": {
            "name": null,
            "description": "fl.acos~ has no parameters."
        }
    },
    "fl.cos~": {
        "1": {
            "name": null,
            "description": "fl.cos~ has no parameters."
        }
    },
    "fl.sinh~": {
        "1": {
            "name": null,
            "description": "fl.sinh~ has no parameters."
        }
    },
    "fl.floor~": {
        "1": {
            "name": null,
            "description": "fl.floor~ has no parameters."
        }
    },
    "fl.trunc~": {
        "1": {
            "name": null,
            "description": "fl.trunc~ has no parameters."
        }
    },
    "fl.log10~": {
        "1": {
            "name": null,
            "description": "fl.log10~ has no parameters."
        }
    },
    "fl.atanh~": {
        "1": {
            "name": null,
            "description": "fl.atanh~ has no parameters."
        }
    },
    "fl.sqrt~": {
        "1": {
            "name": null,
            "description": "fl.sqrt~ has no parameters."
        }
    },
    "fl.acosh~": {
        "1": {
            "name": null,
            "description": "fl.acosh~ has no parameters."
        }
    },
    "fl.tan~": {
        "1": {
            "name": null,
            "description": "fl.tan~ has no parameters."
        }
    },
    "fl.not~": {
        "1": {
            "name": null,
            "description": "fl.not~ has no parameters."
        }
    },
    "fl.atan~": {
        "1": {
            "name": null,
            "description": "fl.atan~ has no parameters."
        }
    },
    "fl.tanh~": {
        "1": {
            "name": null,
            "description": "fl.tanh~ has no parameters."
        }
    },
    "fl.erfc~": {
        "1": {
            "name": null,
            "description": "fl.erfc~ has no parameters."
        }
    },
    "fl.abs~": {
        "1": {
            "name": null,
            "description": "fl.abs~ has no parameters."
        }
    },
    "fl.round~": {
        "1": {
            "name": null,
            "description": "fl.round~ has no parameters."
        }
    },
    "fl.cbrt~": {
        "1": {
            "name": null,
            "description": "fl.cbrt~ has no parameters."
        }
    },
    "fl.cosh~": {
        "1": {
            "name": null,
            "description": "fl.cosh~ has no parameters."
        }
    },
    "fl.ceil~": {
        "1": {
            "name": null,
            "description": "fl.ceil~ has no parameters."
        }
    },
    "fl.copysign~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.greaterthaneq~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.greaterthan~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.or~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.and~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.times~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.divide~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.minus~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.pow~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.atan2~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.notequals~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.lessthaneq~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.max~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.plus~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.modulo~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.lessthan~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.diff~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.equals~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.hypot~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.min~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - pad_in\n[3] - pad_out"
        },
        "2": {
            "name": "/trigger_ins [instantiation enum]",
            "description": "Sets which inputs trigger output.\n\nParameter Options:\n[0] - both\n[1] - left\n[2] - right"
        },
        "3": {
            "name": "/pad [instantiation double]",
            "description": "Sets the value used for padding (for either pad_in or pad_out modes)."
        }
    },
    "fl.uniform~": {
        "1": {
            "name": "/value [double]",
            "description": "Sets the value to output."
        },
        "2": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "3": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter."
        },
        "4": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.random~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        }
    },
    "fl.gaussian~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "4": {
            "name": "/mean [double]",
            "description": "Sets the default mean."
        },
        "5": {
            "name": "/deviation [double]",
            "description": "Sets the default standard deviation."
        },
        "6": {
            "name": "/mismatch [enum]",
            "description": "Sets the mode used when dealing with mismatches between input and output lengths:\n\nParameter Options:\n[0] - default\n[1] - extend"
        }
    },
    "fl.makewindow~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "4": {
            "name": "/window [enum]",
            "description": "Sets the window type:\n\nParameter Options:\n[0] - rectangle\n[1] - triangle\n[2] - trapezoid\n[3] - welch\n[4] - parzen\n[5] - tukey\n[6] - sine\n[7] - hann\n[8] - hamming\n[9] - blackman\n[10] - exact_blackman\n[11] - blackman_harris\n[12] - nuttall_continuous\n[13] - nuttall_minimal\n[14] - flat_top\n[15] - cosine_sum\n[16] - kaiser\n[17] - sine_taper"
        },
        "5": {
            "name": "/exponent [double]",
            "description": "Sets an exponent that each value in the window should be raised to."
        },
        "6": {
            "name": "/compensate [enum]",
            "description": "Sets the gain compensation (the window is divided by the compensated gain).\n\nParameter Options:\n[0] - off\n[1] - linear\n[2] - square\n[3] - reconstruct"
        },
        "7": {
            "name": "/parameters [variable length double array]",
            "description": "An array that sets parameters specific to the window type:"
        },
        "8": {
            "name": "/endpoints [enum]",
            "description": "Sets which endpoints of the window will be generated.\n\nParameter Options:\n[0] - both\n[1] - first\n[2] - last\n[3] - none"
        }
    },
    "fl.ramp~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Controls how the output length is determined:\n\nParameter Options:\n[0] - requested\n[1] - input"
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the requested output length in the units specified by the units parameter."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the units used for the length parameter.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "4": {
            "name": "/scale [enum]",
            "description": "Sets the scaling of the output ramp:\n\nParameter Options:\n[0] - count\n[1] - ms\n[2] - seconds\n[3] - normalised"
        },
        "5": {
            "name": "/endpoints [enum]",
            "description": "Sets the included edges when the scale parameter is set to normalised:\n\nParameter Options:\n[0] - both\n[1] - first\n[2] - last\n[3] - none"
        }
    },
    "fl.tomax~": {
        "1": {
            "name": null,
            "description": "fl.tomax~ has no parameters."
        }
    },
    "fl.frommax~": {
        "1": {
            "name": "/mode [instantiation enum]",
            "description": "Sets the mode:\n\nParameter Options:\n[0] - values\n[1] - params"
        }
    },
    "fl.sink~": {
        "1": {
            "name": "/buffer_size [instantiation double]",
            "description": "Sets the internal buffer size in the units specified by the units parameter."
        },
        "2": {
            "name": "/units [instantiation enum]",
            "description": "Sets the time units used to determine the buffer size and delay.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "3": {
            "name": "/delay [double]",
            "description": "Sets the outpu delay in the units specified by the units parameter."
        },
        "4": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none\n[1] - linear\n[2] - hermite\n[3] - bspline\n[4] - lagrange"
        }
    },
    "fl.trace~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the mode used for output:\n\nParameter Options:\n[0] - full\n[1] - first\n[2] - last\n[3] - specified\n[4] - ratio"
        },
        "2": {
            "name": "/buffer_size [instantiation double]",
            "description": "Sets the internal buffer size in the units specified by the units parameter."
        },
        "3": {
            "name": "/units [instantiation enum]",
            "description": "Sets the time units used to determine the buffer size and delay.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "4": {
            "name": "/position [double]",
            "description": "Sets the position of the output sample in specified or ratio mode."
        },
        "5": {
            "name": "/delay [double]",
            "description": "Sets the output delay in the units specified by the units parameter."
        }
    },
    "fl.source~": {
        "1": {
            "name": "/buffer_size [instantiation double]",
            "description": "Sets the internal buffer size in the units specified by the units parameter."
        },
        "2": {
            "name": "/length [int]",
            "description": "Sets the length of output frames in the units specified by the units parameter."
        },
        "3": {
            "name": "/units [enum]",
            "description": "Sets the time units used to determine the buffer size and output length.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "4": {
            "name": "/delay [double]",
            "description": "Sets the input delay in the units specified by the units parameter:"
        },
        "5": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none\n[1] - linear\n[2] - hermite\n[3] - bspline\n[4] - lagrange"
        }
    },
    "fl.convolve~": {
        "1": {
            "name": "/max_length [instantiation int]",
            "description": "Sets the maximum processing length."
        },
        "2": {
            "name": "/mode [instantiation enum]",
            "description": "Sets the type of input and output.\n\nParameter Options:\n[0] - real\n[1] - complex"
        },
        "3": {
            "name": "/edges [instantiation enum]",
            "description": "Sets the edge behaviour of the convolution process:\n\nParameter Options:\n[0] - linear\n[1] - circular\n[2] - wrap\n[3] - fold\n[4] - mirror"
        }
    },
    "fl.multitaper~": {
        "1": {
            "name": "/max_length [instantiation int]",
            "description": "Sets the maximum input length (and associated internal FFT size)."
        },
        "2": {
            "name": "/num_tapers [int]",
            "description": "Sets the number of tapers to use."
        },
        "3": {
            "name": "/normalise [bool]",
            "description": "Sets normalisation on or off (such that the energy of a full-scale sine wave is 1)."
        },
        "4": {
            "name": "/output [enum]",
            "description": "Sets whether to output values in terms of power or amplitude.\n\nParameter Options:\n[0] - power\n[1] - amplitude"
        },
        "5": {
            "name": "/weighting [enum]",
            "description": "Sets the weighting of the tapers:\n\nParameter Options:\n[0] - uniform\n[1] - linear\n[2] - parabolic"
        }
    },
    "fl.firphase~": {
        "1": {
            "name": "/max_length [instantiation int]",
            "description": "Sets the input length and maximum FFT size."
        },
        "2": {
            "name": "/phase [double]",
            "description": "Sets the phase for the transformed FIR [0 to 1]."
        },
        "3": {
            "name": "/time_factor [double]",
            "description": "Sets the factor used to determine the length for zero padding the FIR before processing."
        }
    },
    "fl.correlate~": {
        "1": {
            "name": "/max_length [instantiation int]",
            "description": "Sets the maximum processing length."
        },
        "2": {
            "name": "/mode [instantiation enum]",
            "description": "Sets the type of input and output.\n\nParameter Options:\n[0] - real\n[1] - complex"
        },
        "3": {
            "name": "/edges [instantiation enum]",
            "description": "Sets the edge behaviour of the correlation process:\n\nParameter Options:\n[0] - linear\n[1] - circular\n[2] - wrap\n[3] - fold\n[4] - mirror"
        }
    },
    "fl.fft~": {
        "1": {
            "name": "/max_length [instantiation int]",
            "description": "Sets the maximum input length and FFT size."
        },
        "2": {
            "name": "/normalise [instantiation bool]",
            "description": "Sets normalisation on or off (such that a full-scale real sine wave produces an amplitude of 1)."
        },
        "3": {
            "name": "/mode [instantiation enum]",
            "description": "Sets the type of input expected and the output produced:\n\nParameter Options:\n[0] - real\n[1] - complex\n[2] - full_spectrum"
        }
    },
    "fl.ifft~": {
        "1": {
            "name": "/max_length [instantiation int]",
            "description": "Sets the maximum output length and FFT size."
        },
        "2": {
            "name": "/normalise [instantiation bool]",
            "description": "Sets normalisation on or off (such that a full-scale real sine wave has an amplitude of 1)."
        },
        "3": {
            "name": "/mode [instantiation enum]",
            "description": "Sets the type of output produced and the input expected:\n\nParameter Options:\n[0] - real\n[1] - complex\n[2] - full_spectrum"
        }
    },
    "fl.window~": {
        "1": {
            "name": "/window [enum]",
            "description": "Sets the window type:\n\nParameter Options:\n[0] - rectangle\n[1] - triangle\n[2] - trapezoid\n[3] - welch\n[4] - parzen\n[5] - tukey\n[6] - sine\n[7] - hann\n[8] - hamming\n[9] - blackman\n[10] - exact_blackman\n[11] - blackman_harris\n[12] - nuttall_continuous\n[13] - nuttall_minimal\n[14] - flat_top\n[15] - cosine_sum\n[16] - kaiser\n[17] - sine_taper"
        },
        "2": {
            "name": "/size [double]",
            "description": "Sets the size of the internal window."
        },
        "3": {
            "name": "/exponent [double]",
            "description": "Sets an exponent that each value in the window should be raised to."
        },
        "4": {
            "name": "/compensate [enum]",
            "description": "Sets the gain compensation (the window is divided by the compensated gain).\n\nParameter Options:\n[0] - off\n[1] - linear\n[2] - square\n[3] - reconstruct"
        },
        "5": {
            "name": "/parameters [variable length double array]",
            "description": "An array that sets parameters specific to the window type:"
        },
        "6": {
            "name": "/endpoints [enum]",
            "description": "Sets which endpoints of the window will be generated.\n\nParameter Options:\n[0] - both\n[1] - first\n[2] - last\n[3] - none"
        }
    },
    "fl.store~": {
        "1": {
            "name": "/name [instantiation string]",
            "description": "Sets the name of the storage to use."
        }
    },
    "fl.register~": {
        "1": {
            "name": "/mode [instantiation enum]",
            "description": "Sets the behaviour of the right input:\n\nParameter Options:\n[0] - store\n[1] - pass"
        }
    },
    "fl.recall~": {
        "1": {
            "name": "/name [instantiation string]",
            "description": "Sets the name of the storage to use."
        }
    },
    "fl.timemedian~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum number of frames for calculation."
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current number of frames for calculation as an integer."
        },
        "3": {
            "name": "/percentile [double]",
            "description": "Sets the percentile to retrieve."
        },
        "4": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "5": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad\n[1] - shorten"
        }
    },
    "fl.framedelta~": {
        "1": {
            "name": null,
            "description": "fl.framedelta~ has no parameters."
        }
    },
    "fl.lag~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum lag value in frames."
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current lag as an integer."
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "4": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad\n[1] - shorten"
        }
    },
    "fl.timemean~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum number of frames for calculation."
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current number of frames for calculation as an integer."
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "4": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad\n[1] - shorten"
        }
    },
    "fl.timestddev~": {
        "1": {
            "name": "/max_frames [int]",
            "description": "Sets the maximum number of frames for calculation."
        },
        "2": {
            "name": "/num_frames [int]",
            "description": "Sets the current number of frames for calculation as an integer."
        },
        "3": {
            "name": "/pad [double]",
            "description": "Sets the padding value."
        },
        "4": {
            "name": "/start [enum]",
            "description": "Sets the behaviour when there are insufficient frames stored (as after a reset):\n\nParameter Options:\n[0] - pad\n[1] - shorten"
        }
    },
    "fl.movingaverage~": {
        "1": {
            "name": "/alpha_up [double]",
            "description": "Sets the alpha value when the average is increasing."
        },
        "2": {
            "name": "/alpha_down [double]",
            "description": "Sets the alpha value when the average is increasing."
        },
        "3": {
            "name": "/average [double]",
            "description": "Sets the padding value for averages."
        },
        "4": {
            "name": "/deviation [double]",
            "description": "Sets the padding value for deviations."
        }
    },
    "fl.perblock~": {
        "1": {
            "name": null,
            "description": "fl.perblock~ has no parameters."
        }
    },
    "fl.once~": {
        "1": {
            "name": null,
            "description": "fl.once~ has no parameters."
        }
    },
    "fl.audiotrigger~": {
        "1": {
            "name": null,
            "description": "fl.audiotrigger~ has no parameters."
        }
    },
    "fl.interval~": {
        "1": {
            "name": "/interval [double]",
            "description": "Sets the interval between frames in the units specified by the units parameter."
        },
        "2": {
            "name": "/units [enum]",
            "description": "Sets the time units used for setting the interval.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds\n[3] - hz"
        },
        "3": {
            "name": "/switchable [instantiation bool]",
            "description": "Sets whether the object is switchable or not (setting this on can reduce CPU efficiency)."
        },
        "4": {
            "name": "/on [bool]",
            "description": "Sets the state when in switchable mode in order to start and stop the timing of intervals."
        }
    },
    "fl.chain~": {
        "1": {
            "name": "/units [enum]",
            "description": "Sets the time units used at the input.\n\nParameter Options:\n[0] - samples\n[1] - ms\n[2] - seconds"
        },
        "2": {
            "name": "/time [enum]",
            "description": "Sets the way in which input values are interpreted:\n\nParameter Options:\n[0] - absolute\n[1] - relative\n[2] - interval"
        },
        "3": {
            "name": "/mode [enum]",
            "description": "Sets the mode of operation:\n\nParameter Options:\n[0] - replace\n[1] - add\n[2] - append"
        }
    },
    "fl.complex.sinh~": {
        "1": {
            "name": null,
            "description": "fl.complex.sinh~ has no parameters."
        }
    },
    "fl.complex.cos~": {
        "1": {
            "name": null,
            "description": "fl.complex.cos~ has no parameters."
        }
    },
    "fl.complex.sin~": {
        "1": {
            "name": null,
            "description": "fl.complex.sin~ has no parameters."
        }
    },
    "fl.complex.exp~": {
        "1": {
            "name": null,
            "description": "fl.complex.exp~ has no parameters."
        }
    },
    "fl.complex.log~": {
        "1": {
            "name": null,
            "description": "fl.complex.log~ has no parameters."
        }
    },
    "fl.complex.cosh~": {
        "1": {
            "name": null,
            "description": "fl.complex.cosh~ has no parameters."
        }
    },
    "fl.complex.log10~": {
        "1": {
            "name": null,
            "description": "fl.complex.log10~ has no parameters."
        }
    },
    "fl.complex.tanh~": {
        "1": {
            "name": null,
            "description": "fl.complex.tanh~ has no parameters."
        }
    },
    "fl.complex.tan~": {
        "1": {
            "name": null,
            "description": "fl.complex.tan~ has no parameters."
        }
    },
    "fl.complex.conj~": {
        "1": {
            "name": null,
            "description": "fl.complex.conj~ has no parameters."
        }
    },
    "fl.complex.sqrt~": {
        "1": {
            "name": null,
            "description": "fl.complex.sqrt~ has no parameters."
        }
    },
    "fl.wrap~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        }
    },
    "fl.fold~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        }
    },
    "fl.clip~": {
        "1": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        }
    },
    "fl.lookup~": {
        "1": {
            "name": "/scale [enum]",
            "description": "Sets the scaling of the input for lookup:\n\nParameter Options:\n[0] - samples\n[1] - normalised\n[2] - bipolar"
        },
        "2": {
            "name": "/edges [enum]",
            "description": "Sets the edge behaviour for both interpolation and lookup:\n\nParameter Options:\n[0] - zero\n[1] - extend\n[2] - wrap\n[3] - fold\n[4] - mirror\n[5] - extrapolate"
        },
        "3": {
            "name": "/bound [bool]",
            "description": "Sets whether lookup is bounded to the edges of the table, or can extend beyond it."
        },
        "4": {
            "name": "/interp [enum]",
            "description": "Sets the interpolation mode:\n\nParameter Options:\n[0] - none\n[1] - linear\n[2] - hermite\n[3] - bspline\n[4] - lagrange"
        }
    },
    "fl.convert~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the mode of conversion:\n\nParameter Options:\n[0] - db->amp\n[1] - amp->db\n[2] - midi->freq\n[3] - freq->midi\n[4] - semitones->ratios\n[5] - ratios->semitones\n[6] - degrees->radians\n[7] - radians->degrees"
        }
    },
    "fl.constant~": {
        "1": {
            "name": "/constant [enum]",
            "description": "Sets the constant to output.\n\nParameter Options:\n[0] - pi\n[1] - 1/pi\n[2] - e\n[3] - 1/e\n[4] - sqrt2\n[5] - 1/sqrt2\n[6] - epsilon"
        },
        "2": {
            "name": "/multiplier [double]",
            "description": "Sets the multiplier."
        }
    },
    "fl.map~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the type of output scaling:\n\nParameter Options:\n[0] - linear\n[1] - log\n[2] - exp\n[3] - pow\n[4] - db\n[5] - transpose\n[6] - inverse_pow\n[7] - inverse_db\n[8] - inverse_transpose"
        },
        "2": {
            "name": "/in_1 [double]",
            "description": "Sets the first bound of the input range."
        },
        "3": {
            "name": "/in_2 [double]",
            "description": "Sets the second bound of the input range."
        },
        "4": {
            "name": "/out_1 [double]",
            "description": "Sets the first bound of the output range."
        },
        "5": {
            "name": "/out_2 [double]",
            "description": "Sets the second bound of the output range."
        },
        "6": {
            "name": "/clip [bool]",
            "description": "If set on then the output is constrained between the two output values."
        },
        "7": {
            "name": "/exponent [double]",
            "description": "Sets the exponent for the pow and inverse_pow modes."
        }
    },
    "fl.samplerate~": {
        "1": {
            "name": "/mode [enum]",
            "description": "Sets the type of conversion or value to output:\n\nParameter Options:\n[0] - rate\n[1] - nyquist\n[2] - samples->ms\n[3] - samples->seconds\n[4] - ms->samples\n[5] - seconds->samples\n[6] - normalised->hz\n[7] - hz->normalised"
        },
        "2": {
            "name": "/normalisation [enum]",
            "description": "Sets the reference point for normalised frequency:\n\nParameter Options:\n[0] - full\n[1] - nyquist"
        }
    },
    "fl.onepolezero~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "2": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode when multi-output mode is off:\n\nParameter Options:\n[0] - lowpass\n[1] - highpass"
        },
        "3": {
            "name": "/multi_output [instantiation bool]",
            "description": "Creates an output per filter mode with all modes output simultaneously."
        },
        "4": {
            "name": "/dynamic [instantiation bool]",
            "description": "Creates inputs for per sample values for each of the filter parameters."
        },
        "5": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame."
        }
    },
    "fl.biquad~": {
        "1": {
            "name": "/a1 [double]",
            "description": "Sets the a1 coefficient."
        },
        "2": {
            "name": "/a2 [double]",
            "description": "Sets the a2 coefficient."
        },
        "3": {
            "name": "/b0 [double]",
            "description": "Sets the b0 coefficient."
        },
        "4": {
            "name": "/b1 [double]",
            "description": "Sets the b1 coefficient."
        },
        "5": {
            "name": "/b2 [double]",
            "description": "Sets the b2 coefficient."
        },
        "6": {
            "name": "/dynamic [instantiation bool]",
            "description": "Creates inputs for per sample values for each of the filter parameters."
        },
        "7": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame."
        }
    },
    "fl.biquadcoeff~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter frequency."
        },
        "2": {
            "name": "/gain [double]",
            "description": "Sets the linear gain of the filter."
        },
        "3": {
            "name": "/qs [double]",
            "description": "Sets the q or s of the filter."
        },
        "4": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode:\n\nParameter Options:\n[0] - lowpass\n[1] - bandpass\n[2] - highpass\n[3] - peaknotch\n[4] - resonant\n[5] - notch\n[6] - lowshelf\n[7] - highshelf"
        },
        "5": {
            "name": "/coefficients [instantiation enum]",
            "description": "Sets the coefficients input and output modes.\n\nParameter Options:\n[0] - static\n[1] - dynamic\n[2] - tagged"
        }
    },
    "fl.svf~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "2": {
            "name": "/res [double]",
            "description": "Sets the filter resonance."
        },
        "3": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode when multi-output mode is off:\n\nParameter Options:\n[0] - lowpass\n[1] - bandpass\n[2] - highpass"
        },
        "4": {
            "name": "/multi_output [instantiation bool]",
            "description": "Creates an output per filter mode with all modes output simultaneously."
        },
        "5": {
            "name": "/dynamic [instantiation bool]",
            "description": "Creates inputs for per sample values for each of the filter parameters."
        },
        "6": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame."
        }
    },
    "fl.onepole~": {
        "1": {
            "name": "/freq [double]",
            "description": "Sets the filter cutoff frequency."
        },
        "2": {
            "name": "/mode [enum]",
            "description": "Sets the filter mode when multi-output mode is off:\n\nParameter Options:\n[0] - lowpass\n[1] - highpass"
        },
        "3": {
            "name": "/multi_output [instantiation bool]",
            "description": "Creates an output per filter mode with all modes output simultaneously."
        },
        "4": {
            "name": "/dynamic [instantiation bool]",
            "description": "Creates inputs for per sample values for each of the filter parameters."
        },
        "5": {
            "name": "/reset [bool]",
            "description": "Determines whether filter memories are reset before processing a new frame."
        }
    },
    "fl.complex.expr~": {
        "1": {
            "name": "/expression [instantiation string]",
            "description": "Sets the mathematical expression."
        },
        "2": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        },
        "3": {
            "name": "/trigger_ins [instantiation variable length bool array]",
            "description": "Sets which input pairs trigger output using an array of bools."
        }
    },
    "fl.expr~": {
        "1": {
            "name": "/expression [instantiation string]",
            "description": "Sets the mathematical expression."
        },
        "2": {
            "name": "/mismatch [instantiation enum]",
            "description": "Sets the mode used when dealing with mismatched input lengths:\n\nParameter Options:\n[0] - wrap\n[1] - shrink\n[2] - extend"
        },
        "3": {
            "name": "/trigger_ins [instantiation variable length bool array]",
            "description": "Sets which inputs trigger output using an array of bools."
        }
    },
    "fl.makestring~": {
        "1": {
            "name": "/num_items [instantiation int]",
            "description": "Sets the number of items."
        },
        "2": {
            "name": "/tag [string]",
            "description": "Sets the output tag."
        },
        "3": {
            "name": "/trigger_ins [instantiation variable length bool array]",
            "description": "Sets which inputs trigger output using an array of bools."
        },
        "4": {
            "name": "/padding [variable length int array]",
            "description": "Sets the zero padding for each input using an array of integers."
        },
        "5": {
            "name": "/item_01...10 [string]",
            "description": "Sets the string or input for item N [1-10]."
        }
    },
    "fl.filtertags~": {
        "1": {
            "name": "/num_filters [instantiation int]",
            "description": "Sets the number of tags."
        },
        "2": {
            "name": "/tag_01...10 [string]",
            "description": "Sets tag number N [1-10]."
        }
    },
    "fl.lookupstring~": {
        "1": {
            "name": "/num_items [instantiation int]",
            "description": "Sets the number of items."
        },
        "2": {
            "name": "/tag [string]",
            "description": "Sets the output tag."
        },
        "3": {
            "name": "/scale [enum]",
            "description": "Sets the input scale:\n\nParameter Options:\n[0] - indices\n[1] - normalised"
        },
        "4": {
            "name": "/empty [enum]",
            "description": "Sets the behaviour when empty frames are received:\n\nParameter Options:\n[0] - ignore\n[1] - reset"
        },
        "5": {
            "name": "/item_01...32 [string]",
            "description": "Sets the string for item N [1-32]."
        }
    },
    "fl.tag~": {
        "1": {
            "name": "/num_ins [instantiation int]",
            "description": "Sets the number of inputs (and hence the number of tags)."
        },
        "2": {
            "name": "/empty [enum]",
            "description": "Sets the behaviour when empty frames are received:\n\nParameter Options:\n[0] - ignore\n[1] - reset"
        },
        "3": {
            "name": "/tag_01...10 [string]",
            "description": "Sets the tag for input N [1-10]."
        }
    },
    "fl.untag~": {
        "1": {
            "name": "/num_outs [instantiation int]",
            "description": "Sets the number of outputs (and hence the number of tags)."
        },
        "2": {
            "name": "/tag_01...10 [string]",
            "description": "Sets the tag related to output N [1-10]."
        }
    },
    "fl.combinetags~": {
        "1": {
            "name": "/num_ins [instantiation int]",
            "description": "Sets the number of inputs."
        }
    }
}